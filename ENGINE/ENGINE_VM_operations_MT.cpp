/*
	DENUVO_Profiler v0.3
	--------------------
	CRACKLAB, ELF
	--------------------
	Tiberium reversing
	********************
	2011	-	2024
*/

#include "../stdafx.h"
#include "ENGINE_SPIRUN7.h"
#include "ENGINE.h"
#include "PROFILER_ENGINE.h"
#include "ENGINE_VM_operations.h"
#include "ENGINE_VM_CONTEXT.h"
#include "ENGINE_Profile_operations.h"
#include "ENGINE_Symbol_avanpost.h"

// ******************************************************************************************************************
// ENGINE_VM_operations_MT.cpp - операции с виртуальной машиной при многопоточной работе
// ******************************************************************************************************************

#define codedef_create_thread_shedule \
		*fphThread = ::CreateRemoteThreadEx(DH_Current_process_fast_handle,NULL,NULL, (LPTHREAD_START_ROUTINE)DH_VM_Supply15_Shedule_threadwork_MT,pThreadWorkStack,NULL,NULL, fpTID);\
				if(*fphThread != NULL) \
					{fphThread++;fpTID++; succes_created_threads++;}

#define codedef_create_thread_shedule_search \
		*fphThread = ::CreateRemoteThreadEx(DH_Current_process_fast_handle,NULL,NULL, (LPTHREAD_START_ROUTINE)DH_VM_Shedule_Search_Object_MT,pThreadWorkStack,NULL,NULL, fpTID);\
				if(*fphThread != NULL) \
					{fphThread++;fpTID++; succes_created_threads++;}

#define codedef_switch_mnemonic_arithmetic__save_immediat_return_result(immediata, digital_mnemonic, pOperand)\
		 switch(digital_mnemonic){\
		 case MNEMONIC_DWORD_add: {*pOperand = immediata; return S__ADD; break;}\
		 case MNEMONIC_DWORD_sub: {*pOperand = immediata; return S__SUB; break;}\
		 case MNEMONIC_DWORD_inc: {return S__INC; break;}\
		 case MNEMONIC_DWORD_dec: {return S__DEC; break;}}

#define codedef_FIX_Bea_Engine_immediat_error if (Dissasm_struct->Argument2.ArgType == MEMORY_MANAGEMENT_REG | ABSOLUTE_)\
{\
	SERVICE_ADDRES addr = strtoull(&Dissasm_struct->Argument2.ArgMnemonic[0], NULL, 16);\
	if (addr > Dissasm_struct->Instruction.Immediat)\
		Dissasm_struct->Instruction.Immediat = addr;}

#define codedef_switch_mnemonic_logical__save_immediat_return_result(immediata, digital_mnemonic, pOperand)\
		 switch(digital_mnemonic)\
		 {\
		 case MNEMONIC_DWORD_not: {return S__NOT; break;}\
		 case MNEMONIC_DWORD_neg: {return S__NEG; break;}}

#define codedef_switch_mnemonic_shift_rotate__save_immediat_return_result(immediata, digital_mnemonic, pOperand)\
		 switch(digital_mnemonic)\
		 {\
		 case MNEMONIC_DWORD_ror: {*pOperand = immediata; return S__ROR; break;}\
		 case MNEMONIC_DWORD_rol: {*pOperand = immediata; return S__ROL; break;}}

#define codedef_default_VMPX_one_step_typescan(X_TYPE) 	CurrentSelectedScanTask = **fpTaskWorkSearcher_stack;	switch(CurrentSelectedScanTask)\
											{\
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_1:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_1)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly1.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_1, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly1.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly1.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly1.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly1);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly1.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly1.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly1.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_1, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
														break;}\
												break;} \
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_2:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_2)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly2.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_2, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly2.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly2.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly2.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly2);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly2.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly2.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly2.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_2, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_3:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_3)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly3.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_3, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly3.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly3.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly3.cip = Hanheld_start_addr; \
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly3);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly3.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly3.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly3.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_3, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_4:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_4)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly4.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_4, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly4.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly4.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly4.cip = Hanheld_start_addr; \
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly4);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly4.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly4.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly4.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_4, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_CRITICAL:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Critical_control)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_CRITICAL, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS: \
																{\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Critial_assembly.dest[0], asm_instruct_size))\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_Critial_assembly);\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Critial_assembly.dest[0], asm_instruct_size))\
																			{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr; \
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_CRITICAL, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_AFTER_1:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__After_1)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT: \
																{\
																	pVMPX_req_context->xed_After_critical_assebly1.cip = Hanheld_start_addr; \
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_1, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly1.dest[0], asm_instruct_size))\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly1.cip = Hanheld_start_addr; \
																	XEDParseAssemble(&pVMPX_req_context->xed_After_critical_assebly1); \
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly1.dest[0], asm_instruct_size))\
																			{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly1.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_1, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_AFTER_2:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__After_2)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly2.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_2, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly2.dest[0], asm_instruct_size))\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly2.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_After_critical_assebly2);\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly2.dest[0], asm_instruct_size))\
																			{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly2.cip = Hanheld_start_addr; \
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_2, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															break;}\
												break;}\
										}\
							if(pVMPX_req_context->Out_EXTRACT_len != NULL)\
							{\
								if ((Dissasm_struct->Instruction.Opcode == pVMPX_req_context->bea_Out_EXTRACT.Instruction.Opcode) && (Dissasm_struct->Instruction.Category == pVMPX_req_context->bea_Out_EXTRACT.Instruction.Category))\
								{\
									pVMPX_req_context->bea_Out_EXTRACT.Argument1.Memory.Displacement = Dissasm_struct->Argument1.Memory.Displacement;\
									pVMPX_req_context->bea_Out_EXTRACT.Argument2.Memory.Displacement = Dissasm_struct->Argument2.Memory.Displacement;\
									if (!memcmp(&Dissasm_struct->Argument1.ArgType, &pVMPX_req_context->bea_Out_EXTRACT.Argument1.ArgType, sizeof(ARGTYPE)-sizeof(Dissasm_struct->Argument1.ArgMnemonic)) && !memcmp(&Dissasm_struct->Argument2.ArgType, &pVMPX_req_context->bea_Out_EXTRACT.Argument2.ArgType, sizeof(ARGTYPE)-sizeof(Dissasm_struct->Argument1.ArgMnemonic)))\
											{codedef_save_EXTRACT_VA_and_AddValue;}\
								}\
								if((pVMPX_req_context->Out_EXTRACT_VALUE_LINK_len != NULL) && (fpContaint_handler->EXTRACT_addres))\
								{\
										if ((Dissasm_struct->Instruction.Opcode == pVMPX_req_context->bea_Out_EXTRACT_VALUE_LINK.Instruction.Opcode) && (Dissasm_struct->Instruction.Category == pVMPX_req_context->bea_Out_EXTRACT_VALUE_LINK.Instruction.Category) && (Dissasm_struct->Argument2.Memory.Displacement == pVMPX_req_context->bea_Out_EXTRACT_VALUE_LINK.Argument2.Memory.Displacement))\
										{\
												switch(pVMPX_req_context->Quick_combine_type__Out_EXTRACT_VALUE_LINK)\
												{\
												case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
													{\
														pVMPX_req_context->xed_Out_EXTRACT_VALUE_LINK.cip = Hanheld_start_addr; \
														if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_EXTRACT_VALUE_LINK, fpInstruction_pool) == true)\
															{codedef_save_EXTRACT_LINK_VA;}\
													break;}\
												case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
													{\
														if(!memcmp(&Dissasm_struct->Argument1, &pVMPX_req_context->bea_Out_EXTRACT_VALUE_LINK.Argument1, sizeof(Dissasm_struct->Argument1)) && (!memcmp(&Dissasm_struct->Argument2, &pVMPX_req_context->bea_Out_EXTRACT_VALUE_LINK.Argument2, sizeof(Dissasm_struct->Argument2))) && (!memcmp(&Dissasm_struct->Argument3, &pVMPX_req_context->bea_Out_EXTRACT_VALUE_LINK.Argument3, sizeof(Dissasm_struct->Argument3))))\
															{codedef_save_EXTRACT_LINK_VA;}\
													break;}\
												case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
													{\
														pVMPX_req_context->xed_Out_EXTRACT_VALUE_LINK.cip = Hanheld_start_addr;\
														XEDParseAssemble(&pVMPX_req_context->xed_Out_EXTRACT_VALUE_LINK);\
														if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Out_EXTRACT_VALUE_LINK.dest[0], asm_instruct_size))\
															{codedef_save_EXTRACT_LINK_VA;}\
													break;}\
												case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
													{\
														pVMPX_req_context->xed_Out_EXTRACT_VALUE_LINK.cip = Hanheld_start_addr; \
															 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_1, fpInstruction_pool) == true)\
																{codedef_save_EXTRACT_LINK_VA;}\
													break;}\
												}\
										}\
								}\
							}//end if (Extract_len != NULL)

#define codedef_default_VMPX_one_step_typescan__NO_EXTRACT(X_TYPE) 	CurrentSelectedScanTask = **fpTaskWorkSearcher_stack;	switch(CurrentSelectedScanTask)\
											{\
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_1:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_1)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly1.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_1, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly1.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly1.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly1.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly1);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly1.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly1.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly1.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_1, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
														break;}\
												break;} \
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_2:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_2)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly2.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_2, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly2.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly2.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly2.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly2);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly2.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly2.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly2.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_2, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_3:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_3)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly3.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_3, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly3.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly3.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly3.cip = Hanheld_start_addr; \
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly3);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly3.dest_size) &&  (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly3.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly3.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_3, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_PREDICT_WAIT_4:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Predict_wait_4)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly4.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_4, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly4.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly4.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly4.cip = Hanheld_start_addr; \
																	XEDParseAssemble(&pVMPX_req_context->xed_Predict_wait_assembly4);\
																	if((asm_instruct_size == pVMPX_req_context->xed_Predict_wait_assembly4.dest_size) && (!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Predict_wait_assembly4.dest[0], asm_instruct_size)))\
																		{codedef_inc_current_taskwork;}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Predict_wait_assembly4.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_PREDICT_WAIT_4, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork;}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_CRITICAL:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__Critical_control)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_CRITICAL, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS: \
																{\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Critial_assembly.dest[0], asm_instruct_size))\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_Critial_assembly);\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Critial_assembly.dest[0], asm_instruct_size))\
																			{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr; \
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_CRITICAL, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist((X_TYPE))}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_AFTER_1:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__After_1)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT: \
																{\
																	pVMPX_req_context->xed_After_critical_assebly1.cip = Hanheld_start_addr; \
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_1, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly1.dest[0], asm_instruct_size))\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly1.cip = Hanheld_start_addr; \
																	XEDParseAssemble(&pVMPX_req_context->xed_After_critical_assebly1); \
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly1.dest[0], asm_instruct_size))\
																			{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly1.cip = Hanheld_start_addr;\
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_1, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															break;}\
												break;}\
												case VMPX_CONTEXT_ASM_AFTER_2:\
												{\
															switch(pVMPX_req_context->Quick_combine_type__After_2)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly2.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_2, fpInstruction_pool) == true)\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS:\
																{\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly2.dest[0], asm_instruct_size))\
																		{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly2.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_After_critical_assebly2);\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_After_critical_assebly2.dest[0], asm_instruct_size))\
																			{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_After_critical_assebly2.cip = Hanheld_start_addr; \
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_AFTER_2, fpInstruction_pool) == true)\
																				{codedef_inc_current_taskwork; codedef_hanheld_set_PREV_TYPE_with_check_collisions_and_taskwork_endlist__after((X_TYPE))}\
																break;}\
															break;}\
												break;}\
										}//end switch

#define codedef_default_VM_EXIT_signature switch(Dissasm_struct->Instruction.Opcode){\
											case ASM_POP_RAX_r8:\
											{pop_rax_r8++;  break; }\
											case ASM_POP_RBX_r9:\
											{pop_rbx_r9++; break; }\
											case ASM_POP_RCX:\
											{pop_rcx++; break; }\
											case ASM_POP_RDX_r10:\
											{pop_rdx_r10++; break; }\
											case ASM_POP_RBP_r13:\
											{pop_rbp_r13++; break; }\
											case ASM_POP_RSI_r14:\
											{pop_rsi_r14++; break; }\
											case ASM_POP_RDI_r15:\
											{pop_rdi_r15++; break; }\
											}//switch (Dissasm_struct->Instruction.Opcode)
static volatile size_t afafa;
pVM_THREADWORK __fastcall DH_VM_Supply15_Shedule_threadwork(__in pVM_VMPX_PROFILE_FOUND_SEQUENCE_STACK pSeqStack)
{
	pVM_THREADWORK pThreadWorkStack = (pVM_THREADWORK)::VirtualAllocEx(DH_Current_process_fast_handle, NULL, sizeof(VM_THREADWORK), MEM_COMMIT, PAGE_READWRITE);

	if(!pThreadWorkStack)
		return NULL;

	pThreadWorkStack->pSeq_live_pointer_stack = pSeqStack; //seq live save 
	// --------- get proc physical cores -----------------------
	size_t num_of_cores = 2;
		__asm
		{
		mov eax,1
		cpuid
		mov eax, 11111111b
		shr ebx, 16
		and ebx, eax
		lea rax, [num_of_cores]
		mov [rax], ebx
		}

		size_t Seq_count = pThreadWorkStack->Found_sequences = pSeqStack->Found_sequences; //количество цепочек
		if(Seq_count < num_of_cores) //если ядер больше, чем цепочек
			num_of_cores = Seq_count;

		register LPDWORD fpTID = &pThreadWorkStack->ThreadID[0]; //set null-fp
		register HANDLE* fphThread = &pThreadWorkStack->hThread[0]; //set null-fp

		// -------- create threads == number of phy cores ----------------
		size_t succes_created_threads = NULL;
		size_t i = num_of_cores;
		pThreadWorkStack->Ready_flag = false; //waiting mode

		//num_of_cores = 1;//test!
		switch(num_of_cores)
		{
			case 16:
				{codedef_create_thread_shedule}
			case 15:
				{codedef_create_thread_shedule}
			case 14:
				{codedef_create_thread_shedule}
			case 13:
				{codedef_create_thread_shedule}
			case 12:
				{codedef_create_thread_shedule}
			case 11:
				{codedef_create_thread_shedule}
			case 10:
				{codedef_create_thread_shedule}
			case 9:
				{codedef_create_thread_shedule}
			case 8:
				{codedef_create_thread_shedule}
			case 7:
				{codedef_create_thread_shedule}
			case 6:
				{codedef_create_thread_shedule}
			case 5:
				{codedef_create_thread_shedule}
			case 4:
				{codedef_create_thread_shedule}
			case 3:
				{codedef_create_thread_shedule}
			case 2:
				{codedef_create_thread_shedule}
			case 1:
			case 0:
				{codedef_create_thread_shedule break;}
			default:
				{
						do
						{
							*fphThread = ::CreateRemoteThreadEx(DH_Current_process_fast_handle,NULL,NULL, (LPTHREAD_START_ROUTINE)DH_VM_Supply15_Shedule_threadwork_MT,pThreadWorkStack,NULL,NULL, fpTID);
							if(*fphThread != NULL) //condition for inc
								{fphThread++;fpTID++; succes_created_threads++;}
						}while(--i);				
				} //def cycle
		}//end coreswitcher

		//set scheduler step-size
		i = Seq_count;

		//shedule ops

		register LPDWORD fpTID_charged = &pThreadWorkStack->ThreadID[0]; //set null-fp
		register LPDWORD fpTID_shedule = &pThreadWorkStack->Shedule_ThreadID[0];
		register pVM_VMPX_PROFILE_FOUND_SEQUENCE fpSheduleSeqUnits = &pSeqStack->Found_Seq[0];; //set null-fp
		register unsigned long thread_i = succes_created_threads;
		fpSheduleSeqUnits--;
		fpTID_shedule--;
		do
		{
			fpSheduleSeqUnits++; //synchro inc seq 
			fpTID_shedule++; //synchro inc  shedule_stack
			if(fpSheduleSeqUnits->isDuplicateContext == true) //filter #1 - for skip duplicate contexts
				continue;

			*fpTID_shedule = *fpTID_charged++; //shedule current context - current charged thread
			if(--thread_i != NULL) //check for thread-empty list
				continue;

				thread_i = succes_created_threads; //restore success threads count
				fpTID_charged = &pThreadWorkStack->ThreadID[0]; //set null-fp
		}while(--i);

		/* старый планировщик
		register LPDWORD fpTID_charged = &pThreadWorkStack->ThreadID[0]; //set null-fp
		register HANDLE* fphThread_charged = &pThreadWorkStack->hThread[0]; //set null-fp
		 
		do
		{
			*fphThread++ = *fphThread_charged++;
			*fpTID++ = *fpTID_charged++;
		}while(--i);*/

		pThreadWorkStack->How_thread_has_been_created = succes_created_threads; //начльное значение потоков
		pThreadWorkStack->TA_Active_Threads_count = succes_created_threads; //количество зайдествованных потоков
		pThreadWorkStack->Ready_flag = true; //get ready
		afafa = 0;
return pThreadWorkStack;
}

DWORD WINAPI DH_VM_Supply15_Shedule_threadwork_MT(LPVOID Param)
{
	size_t TID = ::GetCurrentThreadId(); //get current TID
	pVM_THREADWORK pThreadWorkStack = reinterpret_cast<pVM_THREADWORK>(Param);

	register size_t i = pThreadWorkStack->Found_sequences; //set total interations
	pVM_VMPX_PROFILE_FOUND_SEQUENCE_STACK pSeqStack = pThreadWorkStack->pSeq_live_pointer_stack; //restore seq stack pointer
	register pVM_VMPX_PROFILE_FOUND_SEQUENCE pSeqUnit = &pSeqStack->Found_Seq[0];
	LPDWORD fpTID_shedule_stack = &pThreadWorkStack->Shedule_ThreadID[0]; //set null fp
	SERVICE_ERROR* fpErr_seq_state = &pThreadWorkStack->Err_seq_state[0]; //set null fp
	//TARGET_PROC_REGION_COPY* fpResult_VMPX_Context = &pThreadWorkStack->pRegion_context_result[0];
	//TARGET_PROC_REGION_COPY* fpResult_VMPX_Address_pool = &pThreadWorkStack->pRegion_address_pool_result[0];
	pVMPX_VM_PROFILE_INFO_STACK* fpResult_VM_Context = &pThreadWorkStack->pVM_Context_save[0];
	size_t CryptoOperand = NULL;

	DISASM Dissasm_struct;

	fpErr_seq_state--;
	fpTID_shedule_stack--;
	pSeqUnit--;
	fpResult_VM_Context--;

		//waiting mode
		do {::SleepEx(0, false);}
		while(pThreadWorkStack->Ready_flag == false);

	do
	{
		fpErr_seq_state++;
		fpTID_shedule_stack++;
		pSeqUnit++;
		fpResult_VM_Context++;
		if(*fpTID_shedule_stack != TID) //search this thread shedule (seq)
			continue;
		if(pSeqUnit->isDuplicateContext == true) //skip duplicate. skan only original
			continue;

		// ********* success found - execute shedule ************************* //
		//register pVMPX_VM_PROFILE_INFO_STACK pNew_VMPX_profile = (pVMPX_VM_PROFILE_INFO_STACK)malloc(sizeof(VMPX_VM_PROFILE_INFO_STACK)); //выделение памяти под новую запись
		//fpResult_VMPX_Context->region_size = sizeof(VMPX_VM_PROFILE_INFO_STACK);
		//fpResult_VMPX_Context->type_of_region = REGION_TYPE_VMPX_CONTEXT_STACK;
		//fpResult_VMPX_Context->region_start_addres = 0;
		register pVMPX_VM_PROFILE_INFO_STACK pNew_VMPX_profile = NULL;


		switch (pSeqStack->VMPX_Version)
		{
			case VM_TYPE_VMP2:
			{
				pNew_VMPX_profile = (pVMPX_VM_PROFILE_INFO_STACK)::VirtualAlloc(NULL, def_VMPX_vmpx_2_stack_size, MEM_COMMIT, PAGE_READWRITE);

				//Обнаружение метода шифрования ячеек в supply15//
				pNew_VMPX_profile->table_DEcode_instruction = DH_VM_Supply15_Detect_crypto_method(pSeqUnit, &pSeqStack->IncludeVMRegion, &Dissasm_struct, &pNew_VMPX_profile->table_DEcode_instruction_operand);
				//	if(!Decrypt_method)
					//	::InterlockedIncrement(&afafa);

					//дамп закодированной таблицы хендлов supply15
				if (!DH_ReadProcessAddres_DATA(HUNT_HIVE.tOpenProcHANDLE, (LPVOID)pSeqUnit->EXTRACT_extracted_value, sizeof(HANHELD_ADDRES)*LIMIT_HANDLES_ON_SUPPLY, (LPVOID)&pNew_VMPX_profile->original_hanhelds_table_crypted[0]))
				{
					::VirtualFree(pNew_VMPX_profile, 0, MEM_RELEASE); *fpErr_seq_state = VMPX_ERROR_SUPPLY15_MISS_READ; continue;
				}
				//выделение памяти под пул адресов, корректный пересчёт offset'ов для вспомогательных структур (HANHELD и VM_hanheld_addres_pool) за главным стеком, определение размера стека для VM профиля
				//register pVM_hanheld_addres_pool pNew_VMPX_profile__address_POOL = (pVM_hanheld_addres_pool)malloc(sizeof(VM_hanheld_addres_pool));
				//fpResult_VMPX_Address_pool->region_size = sizeof(VM_hanheld_addres_pool);
				//fpResult_VMPX_Address_pool->type_of_region = REGION_TYPE_VMPX_ADDRESS_POOL;
				//fpResult_VMPX_Address_pool->region_start_addres = 0;
				register pVM_AsmAddr_POOL_STACK pNew_VMPX_profile__address_POOL = (pVM_AsmAddr_POOL_STACK)((SERVICE_ADDRES)pNew_VMPX_profile + def_VMPX_vmpx_2_instr_pool_offset); //register pVM_AsmAddr_POOL_STACK pNew_VMPX_profile__address_POOL = (pVM_AsmAddr_POOL_STACK)::VirtualAlloc(NULL, sizeof(VM_AsmAddr_POOL_STACK), MEM_COMMIT, PAGE_READWRITE);
				pNew_VMPX_profile->ofs_VM_hanheld_addres_pool = (SERVICE_ADDRES)pNew_VMPX_profile__address_POOL - (SERVICE_ADDRES)pNew_VMPX_profile;
				pNew_VMPX_profile->ofs_1Containt_handler = def_VMPX_vmpx_2_HANHELD_offset;
				pNew_VMPX_profile->retail_VM_profile_stack_size = def_VMPX_vmpx_2_stack_size;

				//основное - идентефикация хендлов "островков" согласно загруженному профилю. Инициалзация данных в контейнерах хендлов
				pNew_VMPX_profile->supply_15_start_address = (CELL_ADDRES)pSeqUnit->EXTRACT_extracted_value;
				pNew_VMPX_profile->VMPX_version = pSeqStack->VMPX_Version;
				pNew_VMPX_profile->Stack_RSP_Different = pSeqUnit->Stack_RSP_Different;
				memcpy(&pNew_VMPX_profile->RegionSectionInfo, &pSeqStack->RegionSectionInfo, sizeof(IMAGE_SECTION_HEADER));

				//вторая копия для расшифровки адресов
				memcpy(&pNew_VMPX_profile->original_hanhelds_table_decrypted[0], &pNew_VMPX_profile->original_hanhelds_table_crypted[0], sizeof(pNew_VMPX_profile->original_hanhelds_table_crypted));

				//попытка расшифровки таблицы хендлов найденным методом шифрования
				if (pNew_VMPX_profile->table_DEcode_instruction)
					DH_VM_Supply15_DEcode_256_table(pNew_VMPX_profile->table_DEcode_instruction, pNew_VMPX_profile->table_DEcode_instruction_operand, &pNew_VMPX_profile->original_hanhelds_table_decrypted[0]);

				//имеем ли дело с релоками. восстановление RVA от ImageBase.
				if (HUNT_HIVE.Is_req_relocation)
					DH_VM_Supply15_Relocation_256_table(&pNew_VMPX_profile->original_hanhelds_table_decrypted[0]);

				//контрольное чтение расшифрованных данных из декодированной таблицы
				size_t Read_data;
				if (!DH_ReadProcessAddres_DATA(HUNT_HIVE.tOpenProcHANDLE, (LPVOID)*&pNew_VMPX_profile->original_hanhelds_table_decrypted[0], sizeof(Read_data), (LPVOID)&Read_data) && (!DH_ReadProcessAddres_DATA(HUNT_HIVE.tOpenProcHANDLE, (LPVOID)*&pNew_VMPX_profile->original_hanhelds_table_decrypted[256], sizeof(Read_data), (LPVOID)&Read_data)))
					//{::VirtualFree(pNew_VMPX_profile, def_VMPX_vmpx_2_stack_size, MEM_RELEASE); *fpErr_seq_state = VMPX_ERROR_SUPPLY15_VALID_CRYPTO_METHOD_NOT_FOUND; continue;}
				{
					pNew_VMPX_profile->is_vm_billet = true; codedef_Accept_MT_Research_workflow(VMPX_ERROR_SUPPLY15_VALID_CRYPTO_METHOD_NOT_FOUND); continue;
				}

				//ИДЕНТИФИКАЦИЯ ХЕНДЛОВ
				DH_VM_Supply15_Get_HANHELD_type_256_table(pNew_VMPX_profile, &pSeqStack->IncludeVMRegion, pNew_VMPX_profile__address_POOL, &Dissasm_struct);


				break;} //end CASE VM_TYPE_VMP2
				
			case VM_TYPE_VMP3:
			case VM_TYPE_VMX_D4:
			case VM_TYPE_VMX_D5:
			{
				size_t Calc_VM_profile_dynamic_size = sizeof(VMPX_VM_PROFILE_INFO_STACK);
				size_t offset_1st_HANHELD = sizeof(VMPX_VM_PROFILE_INFO_STACK);
				size_t offset_1st_AddresPool = sizeof(VMPX_VM_PROFILE_INFO_STACK);
					if (pSeqUnit->Researched_VM_hanhelds == 0)
					{
						Calc_VM_profile_dynamic_size += sizeof(HANHELD[1000]);
						offset_1st_AddresPool+= sizeof(HANHELD[1000]);
						Calc_VM_profile_dynamic_size += sizeof(VM_hanheld_addres_pool[1000]);
					}
					else
					{
						if(pSeqUnit->Researched_VM_hanhelds > 50000)
						{
						Calc_VM_profile_dynamic_size += sizeof(HANHELD[1000]);
						offset_1st_AddresPool += sizeof(HANHELD[1000]);
						Calc_VM_profile_dynamic_size += sizeof(VM_hanheld_addres_pool[1000]);
						}
						else
						{
							if (pSeqUnit->Researched_VM_hanhelds < 256)
							{
								Calc_VM_profile_dynamic_size += sizeof(HANHELD[256]);
								offset_1st_AddresPool += sizeof(HANHELD[256]);
								Calc_VM_profile_dynamic_size += sizeof(VM_hanheld_addres_pool[256]);
							}
						}
					}
				pNew_VMPX_profile = (pVMPX_VM_PROFILE_INFO_STACK)::VirtualAlloc(NULL, Calc_VM_profile_dynamic_size, MEM_COMMIT, PAGE_READWRITE);

				pNew_VMPX_profile->is_vm_billet = true; // ONLY BILLET (static analysis not aviable)

				pNew_VMPX_profile->VMPX_version = pSeqStack->VMPX_Version;
				pNew_VMPX_profile->Stack_RSP_Different = pSeqUnit->Stack_RSP_Different;
				memcpy(&pNew_VMPX_profile->RegionSectionInfo, &pSeqStack->RegionSectionInfo, sizeof(IMAGE_SECTION_HEADER));
				memcpy(&pNew_VMPX_profile->VM_ENTER_Seq_Stack, pSeqUnit, sizeof(VM_VMPX_PROFILE_FOUND_SEQUENCE));
				pNew_VMPX_profile->ofs_1Containt_handler = offset_1st_HANHELD;
				pNew_VMPX_profile->ofs_VM_hanheld_addres_pool = offset_1st_AddresPool;
				pNew_VMPX_profile->retail_VM_profile_stack_size = Calc_VM_profile_dynamic_size;
				break;}
		}//end Version switcher
			//ОКОНЧАТЕЛЬНАЯ запись указателей с результатами в регионы threadwork
			codedef_Accept_MT_Research_workflow(ERROR_SUCCESS)
	}while(--i);

	::InterlockedDecrement(&pThreadWorkStack->TA_Active_Threads_count);
return NULL;
}

bool __fastcall DH_VM_Supply15_Terminate_ALL_Shedule_threadworks(__in pVM_THREADWORK* ppThreadWorkStack, __in SERVICE_COUNT ThreadWork_stack_count)
{
	if(ThreadWork_stack_count == NULL) //filter #1
		return true;

	register pVM_THREADWORK* fppThreadWork = ppThreadWorkStack; //set null fp
	fppThreadWork--;
	do
	{
		fppThreadWork++;
		register pVM_THREADWORK fpThreadWork = *fppThreadWork;

		
		register SERVICE_COUNT NumThreadForTerminate = fpThreadWork->How_thread_has_been_created;
		register HANDLE* fphThread = &fpThreadWork->hThread[0];
		do
		{
			::TerminateThread(*fphThread++, 1);
		}while(--NumThreadForTerminate); //terminate thread cycle
	}while(--ThreadWork_stack_count);//main cycle
return true;
}

bool __fastcall DH_VM_ThreadWork_ClearSet(__in pVM_THREADWORK* ppThreadWorkStack, __in SERVICE_COUNT* pThreadWork_stack_count)
{
	if (*pThreadWork_stack_count == NULL) //filter #1
		return true;
	SERVICE_COUNT ThreadWork_stack_count = *pThreadWork_stack_count;

	register pVM_THREADWORK* fppThreadWork = ppThreadWorkStack; //set null fp
	fppThreadWork--;
	do
	{
		fppThreadWork++;
		register pVM_THREADWORK fpThreadWork = *fppThreadWork;
		if (fpThreadWork->TA_Active_Threads_count == NULL)
		{

			//подчищаем сохраненные контексты
			if (fpThreadWork->TA_Context_save_count != NULL)
			{
				size_t i_SUCCES = fpThreadWork->TA_Context_save_count;
				size_t ii = MAX_STACK_SEQ;
				register pVMPX_VM_PROFILE_INFO_STACK* fpVM_Profile_TEMP_SAVE = &fpThreadWork->pVM_Context_save[0];
				fpVM_Profile_TEMP_SAVE--;
				do
				{
					fpVM_Profile_TEMP_SAVE++;
					if (*fpVM_Profile_TEMP_SAVE == NULL)
						continue;
					::VirtualFree(*fpVM_Profile_TEMP_SAVE, 0, MEM_RELEASE);
					if (--i_SUCCES == 0) //все заявленные контексты найденные
						break;
				} while (--ii);
			}
			::VirtualFree(fpThreadWork, 0, MEM_RELEASE);
			*fppThreadWork = 0; // null set stack
			continue;
		}

				register SERVICE_COUNT NumThreadForTerminate = fpThreadWork->How_thread_has_been_created;
				register HANDLE* fphThread = &fpThreadWork->hThread[0];
				do
				{
					::TerminateThread(*fphThread++, 1);
				} while (--NumThreadForTerminate); //terminate thread cycle

			//подчищаем сохраненные контексты
				if (fpThreadWork->TA_Context_save_count != NULL)
				{
					size_t i_SUCCES = fpThreadWork->TA_Context_save_count;
					size_t ii = MAX_STACK_SEQ;
					register pVMPX_VM_PROFILE_INFO_STACK* fpVM_Profile_TEMP_SAVE = &fpThreadWork->pVM_Context_save[0];
					fpVM_Profile_TEMP_SAVE--;
					do
					{
						fpVM_Profile_TEMP_SAVE++;
						if (*fpVM_Profile_TEMP_SAVE == NULL)
							continue;
						::VirtualFree(*fpVM_Profile_TEMP_SAVE, 0, MEM_RELEASE);
						if (--i_SUCCES == 0) //все заявленные контексты найденные
							break;
					} while (--ii);
				}
		::VirtualFreeEx(DH_Current_process_fast_handle, fpThreadWork, 0, MEM_RELEASE);
		*fppThreadWork = 0; // null set stack
	} while (--ThreadWork_stack_count);//main cycle

	*pThreadWork_stack_count = 0;
	return true;
}

bool __fastcall DH_VM_Seq_ClearSet(__in pVM_VMPX_PROFILE_FOUND_SEQUENCE_STACK* ppSeqStack, __in SERVICE_COUNT* pSequence_stack_count)
{
		if(*pSequence_stack_count == NULL) //filter #1
		return true;

		register pVM_VMPX_PROFILE_FOUND_SEQUENCE_STACK* fppSeqStack = ppSeqStack; //set null fp
		 SERVICE_COUNT Sequence_stack_count = *pSequence_stack_count;

	fppSeqStack--;
	do
	{
		fppSeqStack++;
		register pVM_VMPX_PROFILE_FOUND_SEQUENCE_STACK fpSeqStack = *fppSeqStack;
		if (fpSeqStack->IncludeVMRegion.allocated_pool != NULL)
			::VirtualFree(fpSeqStack->IncludeVMRegion.allocated_pool, 0, MEM_RELEASE);

		fpSeqStack->IncludeVMRegion.allocated_pool == NULL;
		codedef_virtual_freeex__seq_stack(fpSeqStack);
		*fppSeqStack = 0; //NULL set stack
	}while(--Sequence_stack_count);//main cycle
	*pSequence_stack_count = 0;
return true;
}

bool __fastcall DH_VM_Supply15_Calc_HANHELDs_quantitative_report__by_ThreadWork(__in pVM_THREADWORK* ppThreadStack, __out SERVICE_COUNT* pTotal_Researched_HANHELDS_found, __out SERVICE_COUNT* pTotal_idendeficated_HANHELDS, __in SERVICE_COUNT Thread_stack_count)
{
		if(Thread_stack_count == NULL) //filter #1
		return false;

		pVM_THREADWORK* fppThreadStack = ppThreadStack; //set null fp


	fppThreadStack--;
	//сброс значений
	*pTotal_Researched_HANHELDS_found = 0;
	*pTotal_idendeficated_HANHELDS = 0;
	do
	{
		fppThreadStack++;
		register pVM_THREADWORK fpThreadStack = *fppThreadStack;
		
		SERVICE_COUNT i = fpThreadStack->TA_Context_save_count; //сколько контекстов перебирается в одном тредворке
		SERVICE_COUNT ii = MAX_STACK_SEQ; //максимально допустимый вариант перебора
		register pVMPX_VM_PROFILE_INFO_STACK* fpContextSave_ESP = &fpThreadStack->pVM_Context_save[0]; //ссылка на первый контекст
		fpContextSave_ESP--;
		do
		{

			fpContextSave_ESP++;
			register pVMPX_VM_PROFILE_INFO_STACK pRestoredContextSave = *fpContextSave_ESP;
			if(pRestoredContextSave == NULL)
				continue;
			--i; //найден сохраненный вариант контекста
			//дублирующейся контексты - цепочки исключаются планировщиком (	if(fpSheduleSeqUnits->isDuplicateContext == true); fpThreadStack->ThreadID[0]))
			if(pRestoredContextSave->supply_15_start_address == NULL) //фильтр на Supply15
					{if(i == NULL)break; continue;}

			//операции подсчета
			*pTotal_Researched_HANHELDS_found += pRestoredContextSave->handles_count;
			*pTotal_idendeficated_HANHELDS += pRestoredContextSave->identeficated_handles_count;
			 if(i == NULL)
				 ii = 1; //TERMINATE cycle
		}while(--ii);//sub cycle - Seq parse

	}while(--Thread_stack_count);//main cycle
return true;
}

SERVICE_TYPE __fastcall DH_VM_Supply15_Detect_crypto_method(__in pVM_VMPX_PROFILE_FOUND_SEQUENCE pSeqStack, __in pREGION_COPY Req_all_VM_insruction_region, __in DISASM* Dissasm_struct, __out size_t* pCrypto_Operand)
{
	if(!pSeqStack->EXTRACT_VALUE_LINK_address) //filter #1
		return NULL;

	register size_t Bea_left_side_type = pSeqStack->Bea_EXTRACT_VALUE_LINK__left_side_type;
	size_t Bea_left_side_size = pSeqStack->Bea_EXTRACT_VALUE_LINK__left_Arg_size;
		if((Bea_left_side_type & -256) != (REGISTER_TYPE | GENERAL_REG)) //filter #1 ONLY REGISTER 
				return NULL;
	
	//convert Bea register to DH
	size_t link_cpu_register = DH_Convert_Bea__to__DH_CPU_register(Bea_left_side_type & 0xFF);
	 

	
	//determine next asm side parametrs
	register SERVICE_ADDRES Hanheld_start_addr =  pSeqStack->EXTRACT_VALUE_LINK_address + pSeqStack->Bea_EXTRACT_VALUE_LINK__asm_size; //next VA
	register PVOID fpInstruction_pool = (PVOID)((SERVICE_ADDRES)(Req_all_VM_insruction_region->allocated_pool) + (Hanheld_start_addr - Req_all_VM_insruction_region->region_start_addres));

	register size_t i = MAX_DEEP_CRYPTO_ASM_IN_HANHELD;
	register size_t asm_instruct_size = NULL;
	size_t Safe_max_bound =  (ULONG64)Req_all_VM_insruction_region->allocated_pool + Req_all_VM_insruction_region->region_size;
	SERVICE_ADDRES instruction_pool = (SERVICE_ADDRES)Req_all_VM_insruction_region->allocated_pool;

	Dissasm_struct->Archi=64; //64 bit
	do
	{
				 if((SERVICE_ADDRES)fpInstruction_pool >= Safe_max_bound || (SERVICE_ADDRES)fpInstruction_pool < (SERVICE_ADDRES)instruction_pool )
					 break;

				Dissasm_struct->EIP = (UIntPtr)fpInstruction_pool;
				Dissasm_struct->VirtualAddr = Hanheld_start_addr; //handler start addr
				asm_instruct_size = Disasm(Dissasm_struct); //disasm!!!
				
				const ULONG quick_instruction_category = Dissasm_struct->Instruction.Category;
				const ULONG quick_instruction_OPCODE = Dissasm_struct->Instruction.Opcode;
				const DWORD quick_instr_digital_mnemonic = *(LPDWORD)&Dissasm_struct->Instruction.Mnemonic[0];

				switch(quick_instruction_OPCODE)
				{
						//%%%%%%% CONTROL_TRANSFER (RET & JMP & CALL) %%%%%%%%%%//
				case ASM_RET_0xBytes: {codedef_quick_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_condition_for_abort_variator_cycle; break;}
				case ASM_RET: {codedef_set_condition_for_abort_variator_cycle; break;} 
				case ASM_JMP_CALL_reg: {
						//::::::: INC (any cpu reg) || DEC (any cpu reg)  ::::::://
					if ((Dissasm_struct->Argument1.ArgType == Bea_left_side_type) && (Dissasm_struct->Argument1.ArgSize == Bea_left_side_size))
					{
						if (quick_instruction_category == GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION)
								{codedef_switch_mnemonic_arithmetic__save_immediat_return_result(Dissasm_struct->Instruction.Immediat, quick_instr_digital_mnemonic, pCrypto_Operand)}
					}//end if firlter

					codedef_quick_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);

					if (Dissasm_struct->Instruction.BranchType == JmpType) //select JMP reg (END of HANHELD!!! TYPE = REACH_HANHELD_END) 
									{codedef_set_condition_for_abort_variator_cycle;} 
								if (Dissasm_struct->Instruction.BranchType == RetType) //ret (spec condition)
									{ codedef_set_condition_for_abort_variator_cycle;} //codedef_imm_return();//EXIT VM - END !!!!!!!!!!!!!!!!!!!
					break;} //jmp reg & call reg
				case ASM_JMP_CONST_SHORT:
				case ASM_JMP_CONST: {
					if (Dissasm_struct->Instruction.AddrValue != NULL) //jmp CONST_address
							{codedef_calculate_hanheld_jmp_continue;asm_instruct_size = NULL;}
							
					break;} 
				case ASM_CALL_OPERAND:{codedef_quick_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); if(Dissasm_struct->Instruction.AddrValue - Hanheld_start_addr < NEAR_JMPS_TRICK){codedef_calculate_hanheld_jmp_continue;asm_instruct_size = NULL;}break;}
									//jmps inside hanheld
					// ************ JUMPOUTs ************ //
				/*		
				case ASM_branch_JO: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JNO: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JB:  {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JAE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JNE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JBE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JA: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JS: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JNS:{codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);break;}
				case ASM_branch_JP: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);  break;}
				case ASM_branch_JNP: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JL: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JGE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);  break;}
				case ASM_branch_JLE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				case ASM_branch_JG: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); break;}
				*/
				default:
					{
							if (quick_instruction_category == (GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER))
								break;
							if ((Dissasm_struct->Instruction.BranchType != NULL))
								break;

						// ____________ PARSE STEP-BYTE-STEP MODE - SEARCH ASM, WHO USE REQ CPU REGISTER_____________ //
						
									//*** check for change registers trick ***
									if ((Dissasm_struct->Argument2.ArgType == Bea_left_side_type))
									{
										if(((Dissasm_struct->Argument1.ArgType & 0xFFFFFF00) == (REGISTER_TYPE | GENERAL_REG)) &&  (Dissasm_struct->Argument1.ArgSize == Dissasm_struct->Argument2.ArgSize == Bea_left_side_size))
											{Bea_left_side_type  = Dissasm_struct->Argument1.ArgType; link_cpu_register = DH_Convert_Bea__to__DH_CPU_register(Bea_left_side_type & 0xFF); break;}
									}//end if ((Dissasm_struct->Argument2.ArgType == Bea_left_side_type))
								
								
					if((Dissasm_struct->Argument1.ArgType == Bea_left_side_type) && (Dissasm_struct->Argument1.ArgSize == Bea_left_side_size))
					{
								switch(quick_instruction_OPCODE)
								{
									//::::::: BSWAP (any cpu reg) ::::::://
								case ASM_BSWAP_REG_rax_eax_r8:
								case ASM_BSWAP_REG_rcx_ecx_r9:
								case ASM_BSWAP_REG_rdx_edx_r10:
								case ASM_BSWAP_REG_rbx_ebx_r11:
								case ASM_BSWAP_REG_rsp_esp_r12:
								case ASM_BSWAP_REG_rbp_ebp_r13:
								case ASM_BSWAP_REG_rsi_esi_r14:
								case ASM_BSWAP_REG_rdi_edi_r15:
									{
										codedef_quick_category_filter(GENERAL_PURPOSE_INSTRUCTION|DATA_TRANSFER);
										return S__BSWAP;
									break;}
								//::::::: ADD (any cpu reg), short || SUB (any cpu reg), short  || XOR (any cpu reg), short ::::::://
								case ASM_ADD_8bit:
									{
										switch(quick_instruction_category)
										{
											
											case (GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION):{
														codedef_FIX_Bea_Engine_immediat_error //codedef_FIX_Bea_Engine_immediat_error
														codedef_switch_mnemonic_arithmetic__save_immediat_return_result(Dissasm_struct->Instruction.Immediat, quick_instr_digital_mnemonic, pCrypto_Operand)
														
																									  break;}
											case (GENERAL_PURPOSE_INSTRUCTION|LOGICAL_INSTRUCTION):{
																									*pCrypto_Operand = Dissasm_struct->Instruction.Immediat;
																									return S__XOR;
																								 break;}
										}//end category switch
									break;}
								//::::::: ADD (any cpu reg), long || SUB (any cpu reg), long  || XOR (any cpu reg), long ::::::://
								case ASM_ADD_32bit:
									{
									
										switch(quick_instruction_category)
										{
											case (GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION):{
														codedef_FIX_Bea_Engine_immediat_error //codedef_FIX_Bea_Engine_immediat_error
														codedef_switch_mnemonic_arithmetic__save_immediat_return_result(Dissasm_struct->Instruction.Immediat, 	quick_instr_digital_mnemonic, pCrypto_Operand)
																									  break;}
												case (GENERAL_PURPOSE_INSTRUCTION|LOGICAL_INSTRUCTION):{
														codedef_FIX_Bea_Engine_immediat_error //codedef_FIX_Bea_Engine_immediat_error
																									*pCrypto_Operand = Dissasm_struct->Instruction.Immediat;
																									return S__XOR;
																								 break;}
										}//end switch Dissasm_struct->Instruction.Category
									break;}
								//::::::: INC (any cpu reg) || DEC (any cpu reg)  ::::::://
								case ASM_INC:
									{
										if(quick_instruction_category == (GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION))
											{codedef_switch_mnemonic_arithmetic__save_immediat_return_result(Dissasm_struct->Instruction.Immediat, 	quick_instr_digital_mnemonic, pCrypto_Operand)}
									break;}
								//::::::: NEG (any cpu reg) || NOT (any cpu reg)  ::::::://
								case ASM_NEG_REG:
									{
										if(quick_instruction_category == (GENERAL_PURPOSE_INSTRUCTION|LOGICAL_INSTRUCTION) || quick_instruction_category == (GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION))
											{codedef_switch_mnemonic_logical__save_immediat_return_result(Dissasm_struct->Instruction.Immediat, quick_instr_digital_mnemonic, pCrypto_Operand)}							
									break;}
								case ASM_NEG_ROL:{
									codedef_quick_category_filter(GENERAL_PURPOSE_INSTRUCTION|SHIFT_ROTATE);
										codedef_switch_mnemonic_shift_rotate__save_immediat_return_result(Dissasm_struct->Instruction.Immediat, quick_instr_digital_mnemonic, pCrypto_Operand)
										 return S__ROL;
									break;}
								case ASM_NEG_ROR:{
									codedef_quick_category_filter(GENERAL_PURPOSE_INSTRUCTION|SHIFT_ROTATE);
											codedef_switch_mnemonic_shift_rotate__save_immediat_return_result(Dissasm_struct->Instruction.Immediat, quick_instr_digital_mnemonic, pCrypto_Operand)
										 return S__ROR;
									break;}
								}//end SECOND switch(Dissasm_struct->Instruction.Opcode)
						}//end if 
					}//(Dissasm_struct->Argument1.ArgType == Bea_left_side_type) && (Dissasm_struct->Argument1.ArgSize == Bea_left_side_size)
				}//END OPERATIONAL CODE SWITCHER
		Hanheld_start_addr+=asm_instruct_size; fpInstruction_pool=(LPVOID)((ULONG64)fpInstruction_pool + (ULONG64)asm_instruct_size);
	}while(i--);//main crypto scan cycle

return S__SERVICE_NODECODE;
}

void __fastcall  DH_VM_Supply15_DEcode_256_table(__in size_t Decode_instruction_s_type, __in size_t Decode_operand__optional, __in __out CELL_ADDRES First_table_cell)
{
	//прямая операция групповая

		switch(Decode_instruction_s_type)
		{
		case S__SERVICE_NODECODE: break;
		case S__INC: {
			//0
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//10
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//20
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//30
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//40
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//50
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//60
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//70
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//80
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//90
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//100
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//110
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//120
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//130
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//140
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//150
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//160
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//170
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//180
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//190
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//200
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//210
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//220
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//230
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//240
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //10...

			//250
			*First_table_cell=*First_table_cell+1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell+1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell+1; //6...
			break;}
		case S__DEC: {			
			//*Desd_out_Addres=*Desd_out_Addres-1; 

			//0
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//10
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//20
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//30
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//40
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//50
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//60
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//70
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//80
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//90
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//100
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//110
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//120
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//130
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//140
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//150
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//160
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//170
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//180
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//190
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//200
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//210
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//220
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//230
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//240
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //6...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //7...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //8...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //9...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //10...

			//250
			*First_table_cell=*First_table_cell-1; First_table_cell++; //1...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //2...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //3...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //4...
			*First_table_cell=*First_table_cell-1; First_table_cell++; //5...
			*First_table_cell=*First_table_cell-1; //6...
			
			break;}
		case S__XOR: {
			//*First_table_cell^=Decode_operand__optional; 
			
			//0
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//10
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//20
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//30
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//40
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//50
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//60
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//70
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//80
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//90
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//100
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//110
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//120
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//130
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//140
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//150
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//160
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//170
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//180
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//190
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//200
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//210
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//220
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//230
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//240
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //10...

			//250
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell^=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell^=Decode_operand__optional; //6...
			break;}
		case S__NOT: {//*Desd_out_Addres=~*Desd_out_Addres; 
			//0
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//10
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//20
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//30
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//40
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//50
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//60
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//70
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//80
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//90
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//100
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//110
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//120
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//130
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//140
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//150
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//160
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//170
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//180
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//190
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//200
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//210
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//220
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//230
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//240
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; First_table_cell++; //6...
			*First_table_cell=~*First_table_cell; First_table_cell++; //7...
			*First_table_cell=~*First_table_cell; First_table_cell++; //8...
			*First_table_cell=~*First_table_cell; First_table_cell++; //9...
			*First_table_cell=~*First_table_cell; First_table_cell++; //10...

			//250
			*First_table_cell=~*First_table_cell; First_table_cell++; //1...
			*First_table_cell=~*First_table_cell; First_table_cell++; //2...
			*First_table_cell=~*First_table_cell; First_table_cell++; //3...
			*First_table_cell=~*First_table_cell; First_table_cell++; //4...
			*First_table_cell=~*First_table_cell; First_table_cell++; //5...
			*First_table_cell=~*First_table_cell; //6...

			break;}
		case S__NEG: {
			//*Desd_out_Addres=-*Desd_out_Addres; 
			//0
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//10
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//20
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//30
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//40
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//50
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//60
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//70
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//80
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//90
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//100
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//110
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//120
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//130
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//140
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//150
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//160
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//170
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//180
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//190
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//200
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//210
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//220
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//230
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//240
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; First_table_cell++; //6...
			*First_table_cell=-*First_table_cell; First_table_cell++; //7...
			*First_table_cell=-*First_table_cell; First_table_cell++; //8...
			*First_table_cell=-*First_table_cell; First_table_cell++; //9...
			*First_table_cell=-*First_table_cell; First_table_cell++; //10...

			//250
			*First_table_cell=-*First_table_cell; First_table_cell++; //1...
			*First_table_cell=-*First_table_cell; First_table_cell++; //2...
			*First_table_cell=-*First_table_cell; First_table_cell++; //3...
			*First_table_cell=-*First_table_cell; First_table_cell++; //4...
			*First_table_cell=-*First_table_cell; First_table_cell++; //5...
			*First_table_cell=-*First_table_cell; //6...

			break;}
		case S__ADD: {
			//*Desd_out_Addres+=Decode_operand__optional; 
			//0
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//10
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//20
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//30
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//40
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//50
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//60
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//70
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//80
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//90
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//100
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//110
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//120
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//130
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//140
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//150
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//160
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//170
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//180
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//190
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//200
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//210
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//220
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//230
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//240
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //10...

			//250
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell+=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell+=Decode_operand__optional; //6...

			break;}
		case S__SUB: {
			//*Desd_out_Addres-=Decode_operand__optional; 
			//0
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//10
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//20
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//30
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//40
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//50
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//60
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//70
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//80
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//90
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//100
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//110
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//120
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//130
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//140
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//150
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//160
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//170
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//180
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//190
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//200
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//210
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//220
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//230
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//240
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //6...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //7...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //8...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //9...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //10...

			//250
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //1...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //2...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //3...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //4...
			*First_table_cell-=Decode_operand__optional; First_table_cell++; //5...
			*First_table_cell-=Decode_operand__optional; //6..
			
			break;}
		case S__BSWAP: {
			//*Desd_out_Addres = _byteswap_uint64(*Desd_out_Addres); 
			//0
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//10
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//20
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//30
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//40
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//50
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//60
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//70
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//80
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//90
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//100
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//110
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//120
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//130
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//140
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//150
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//160
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//170
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//180
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//190
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//200
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//210
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//220
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//230
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//240
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //6...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //7...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //8...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //9...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //10...

			//250
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //1...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //2...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //3...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //4...
			*First_table_cell=_byteswap_uint64(*First_table_cell); First_table_cell++; //5...
			*First_table_cell=_byteswap_uint64(*First_table_cell); //6..
			
			break;} //reverse(*Desd_out_Addres)
		case S__ROL: {
			/*
				__asm {
					mov r15, Desd_out_Addres
					mov r14, [r15]
					mov rcx, [Decode_operand__optional]
					rol r14, cl
					mov [r15], r14
					 } */

			//0
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//10
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//20
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//30
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//40
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//50
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//60
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//70
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//80
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//90
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//100
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//110
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//120
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//130
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//140
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//150
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//160
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//170
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//180
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//190
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//200
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//210
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//220
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//230
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//240
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//250
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotl64(*First_table_cell,Decode_operand__optional); //6..

				break;}
		case S__ROR: {
			/*
				__asm {
					lea r15, [Desd_out_Addres]
					mov r14, [r15]
					mov rcx, [Decode_operand__optional]
					ror r14, cl
					mov [r15], r14
					 } ; */
					//0
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//10
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//20
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//30
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//40
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//50
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//60
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//70
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//80
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//90
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//100
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//110
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//120
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//130
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//140
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//150
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//160
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//170
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//180
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//190
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//200
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//210
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//220
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//230
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//240
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //6...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //7...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //8...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //9...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //10...

			//250
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //1...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //2...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //3...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //4...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); First_table_cell++; //5...
			*First_table_cell = _rotr64(*First_table_cell,Decode_operand__optional); //6..
			break;}
		}//end switch
}

void __fastcall  DH_VM_Supply15_Relocation_256_table(__in __out CELL_ADDRES First_table_cell)
{
	register size_t TargetImageBase = (size_t)HUNT_HIVE.Process_HIVE.Main_HMODULE;
			//0
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//10
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//20
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//30
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//40
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//50
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//60
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//70
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//80
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//90
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//100
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//110
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//120
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//130
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//140
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//150
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//160
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//170
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//180
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//190
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//200
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//210
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//220
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//230
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//240
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; First_table_cell++; //6...
			*First_table_cell+=TargetImageBase; First_table_cell++; //7...
			*First_table_cell+=TargetImageBase; First_table_cell++; //8...
			*First_table_cell+=TargetImageBase; First_table_cell++; //9...
			*First_table_cell+=TargetImageBase; First_table_cell++; //10...

			//250
			*First_table_cell+=TargetImageBase; First_table_cell++; //1...
			*First_table_cell+=TargetImageBase; First_table_cell++; //2...
			*First_table_cell+=TargetImageBase; First_table_cell++; //3...
			*First_table_cell+=TargetImageBase; First_table_cell++; //4...
			*First_table_cell+=TargetImageBase; First_table_cell++; //5...
			*First_table_cell+=TargetImageBase; //6...
}

SERVICE_COUNT __fastcall  DH_VM_Supply15_Get_HANHELD_type_256_table(__in pVMPX_VM_PROFILE_INFO_STACK pVMPX_info_stack, __in pREGION_COPY Req_all_VM_insruction_region, __in pVM_AsmAddr_POOL_STACK Req_VM_hanheld_instruction_addr_pool, __in DISASM* Dissasm_struct)
{

	//данные хендлов "островков"
	register pHANHELD fpContaint_handler = (pHANHELD)((SERVICE_ADDRES)pVMPX_info_stack + pVMPX_info_stack->ofs_1Containt_handler); //fp-указатель на описатель хендла "островка"
	size_t i = LIMIT_HANDLES_ON_SUPPLY; // i = количество хендлов в таблице, которые требуется отработать (256)
	size_t  ii = MAX_DEEP_ASM_IN_HANHELD; // ii = глубина исследования "островка"
	CELL_ADDRES fpHANHELD_Table_Decode_CELL = &pVMPX_info_stack->original_hanhelds_table_decrypted[0]; //fp-указатель по табличному списку адресов "хендлов"
	CELL_ADDRES pTarget_Cell_pointer = (CELL_ADDRES)pVMPX_info_stack->supply_15_start_address; //расчетный адрес ячейки
	HANHELD_JUMPOUTS_GRAPH* fpJumpOutGraph = &fpContaint_handler->critical_jumpouts_array[0];
	HANHELD_TYPE_CRITICAL_DETERMINE_ADDRES* fpDTAA_critical_addres = &fpContaint_handler->determine_type_addres_array[0]; //Determine type addres array
	pVMPX_info_stack->handles_count = NULL;

	//данные пула адресов "островка"
	register pVM_hanheld_addres_pool fpAddrPool_hanheld = &Req_VM_hanheld_instruction_addr_pool->VM_HANHELD_addr_pool[0]; //fp-указатель на юнит пула под хендл "островка"
	SERVICE_ADDRES* fpAddPool__asm_addres = &fpAddrPool_hanheld->asm_instruction_addres[0]; //fp-указатель юнита на массив адресов
	LPBYTE fpAddPool__FCM = &fpAddrPool_hanheld->asm_instruction_unconditional_FLOW_CONTROL_MARKER[0]; //fp-указатель юнита на контрольный маркер
	SERVICE_ADDRES* fpAddPool__FCM_dest_addres = &fpAddrPool_hanheld->asm_instruction_unconditional_FLOW_CONTROL_MARKER_dest_addres[0]; //fp-указатель адрес назначения контрольного маркера

	//переменные интерпретатора
	pVM_VMPX_PROFILE_INI_STACK pInterpret_VMPX_Stack = reinterpret_cast<pVM_VMPX_PROFILE_INI_STACK>(HUNT_HIVE.VMPX_Context_VMP2.allocated_pool); //pVM_VMPX_PROFILE_INI_STACK pInterpret_VMPX_Stack = (pVM_VMPX_PROFILE_INI_STACK)HUNT_HIVE.VMPX_Context_VMP2.allocated_pool; //reinterpret allocated pool -> VMPX2_Context
	register pVM_VMPX_PROFILE_INI pVMPX_req_context = &pInterpret_VMPX_Stack->VMPX_HANHELD_TYPE_ENUMS[0]; //set null fp
	if(!pInterpret_VMPX_Stack)
		return VMPX_ERROR_SUPPLY15_VMPX_CONTEXT_NOT_READY;
	

	 //переменные дизассемблера
	 register size_t Safe_max_bound =  (ULONG64)Req_all_VM_insruction_region->allocated_pool + Req_all_VM_insruction_region->region_size;
	 LPBYTE instruction_pool = Req_all_VM_insruction_region->allocated_pool;
	 SERVICE_ADDRES Hanheld_start_addr =  NULL; //extract VA
	 PVOID fpInstruction_pool =  NULL; //extract pointer in the allocated pool
	 register size_t asm_instruct_size = NULL; //out asm size
	
	 //переменные "диспетчера задач по поиску асм инструкций"
	 SERVICE_TYPE* TaskWorkSearcher_stack[HANHELD_TYPE_ENUMS_COUNT]; //стек по задачам для проверки инструкций (Predict, Critical, After)
	 SERVICE_TYPE** fpTaskWorkSearcher_stack;
	 SERVICE_ADDRES LastCritical_Corrector_stack[HANHELD_TYPE_ENUMS_COUNT]; //стек запоминания последних адресов критических инструкций (для исключения коллизий при исследовании After_1 - After_2)
	 SERVICE_ADDRES* fpLastCritical_Corrector_stack;

      //установка начальных значений (set initial) в "диспетчере задач по поиску асм инструкций" - HANHELD_TYPE_ENUMS (HANHELD_TYPE_VM_ENTER...)

		//ВЫРАВНИВАНИЕ fp
		fpContaint_handler--;
		fpHANHELD_Table_Decode_CELL--;
		fpAddrPool_hanheld--;
		pTarget_Cell_pointer--;
	do
	{
		//ВЫРАВНИВАНИЕ fp
		fpContaint_handler++;
		fpHANHELD_Table_Decode_CELL++;
		fpAddrPool_hanheld++;
		pTarget_Cell_pointer++;

			//пересчет указателей
			Hanheld_start_addr = *fpHANHELD_Table_Decode_CELL; //следующий адрес хендла "островка" из таблицы
			fpInstruction_pool = (Hanheld_start_addr - Req_all_VM_insruction_region->region_start_addres) + instruction_pool; //синхронное вычисление указателя для него в регионе дампа асм инструкций
			fpContaint_handler->HANDELD_Primary_Addres = *fpHANHELD_Table_Decode_CELL; //ЗАПИСЬ начального адреса хендла

			 if((SERVICE_ADDRES)fpInstruction_pool >= Safe_max_bound || (SERVICE_ADDRES)fpInstruction_pool < (SERVICE_ADDRES)instruction_pool) //условие выхода за границы региона асм инструкций
							 continue;

			 //установка fp-null, пересчётов
				// > для цикла
				ii = MAX_DEEP_ASM_IN_HANHELD;
				asm_instruct_size = NULL;
				// > для пула адресов
				fpAddrPool_hanheld->HANHELD_asm_instruction_count = 0;
				fpAddPool__asm_addres = &fpAddrPool_hanheld->asm_instruction_addres[0];
				fpAddPool__FCM = &fpAddrPool_hanheld->asm_instruction_unconditional_FLOW_CONTROL_MARKER[0];
				fpAddPool__FCM_dest_addres = &fpAddrPool_hanheld->asm_instruction_unconditional_FLOW_CONTROL_MARKER_dest_addres[0];
				// > для "диспетчера задач по поиску асм инструкций"
				memcpy(&TaskWorkSearcher_stack[0], &pInterpret_VMPX_Stack->TaskWorkSearcher_stack__NULL_fp[0], sizeof(pInterpret_VMPX_Stack->TaskWorkSearcher_stack__NULL_fp));
				fpTaskWorkSearcher_stack = &TaskWorkSearcher_stack[1];	//skip HANHELD_TYPE_DETERMINE_ERROR
				//> для юнита данных "островка"
				fpContaint_handler->HANDELD_previously_type = NULL;
				fpContaint_handler->HANDELD_previously_type__VMPX_asm_count = NULL;
				fpContaint_handler->critical_jumpouts_array_count = NULL;
				fpContaint_handler->Cell_Addres = pTarget_Cell_pointer;
				fpContaint_handler->determine_address_array_count = NULL;
				signed long RBP_shift = NULL; //СДВИГ ПО стеку переменных
				signed long PCODE_shift = NULL; //СДВИГ ПО ленте p-code
					//> для графов JUMPOuts
					fpJumpOutGraph = &fpContaint_handler->critical_jumpouts_array[0];
					//> для критических адресов, определяющих тип "островка"
					fpDTAA_critical_addres = &fpContaint_handler->determine_type_addres_array[0];
					//> инкремент корректно найденных значений
					pVMPX_info_stack->handles_count++; //inc, успешно установлен RVA "островка" и его положение в регионе выделенныхъ асм инструкций
					//специальные назначения
						//>> VM_EXIT
						BYTE pop_rax_r8 = 0;
						BYTE pop_rbx_r9 = 0;
						BYTE pop_rcx = 0;
						BYTE pop_rdx_r10 = 0;
						BYTE pop_rbp_r13 = 0;
						BYTE pop_rsi_r14 = 0;
						BYTE pop_rdi_r15 = 0;
					
				//выравнивание
					//> для пула адресов
					fpAddPool__asm_addres--;
					fpAddPool__FCM--;
					fpAddPool__FCM_dest_addres--;
				 do
				 {
					 register SERVICE_TYPE CurrentSelectedScanTask;
						//инкремент
							//> для пула адресов
							fpAddPool__asm_addres++;
							fpAddPool__FCM++;
							fpAddPool__FCM_dest_addres++;

							//************* ПРОБЛЕМНЫЕ ИНСТРУКЦИИ *************************************** //
							//; fix
							//; 00000001416D5925 | 36 8A 02 | mov al, byte ptr ss : [rdx] | 0x36 - лишний prefix для XED_Parse
							//; 000000014165B17D | 66 36 89 10   | mov word ptr ss:[rax],dx   | 0x10 - лишний prefix для XED_Parse

							//ДИЗАССЕМБЛЕР
					 		Hanheld_start_addr+=asm_instruct_size; fpInstruction_pool=(LPVOID)((ULONG64)fpInstruction_pool + (ULONG64)asm_instruct_size);
								 if((SERVICE_ADDRES)fpInstruction_pool >= Safe_max_bound || (SERVICE_ADDRES)fpInstruction_pool < (SERVICE_ADDRES)instruction_pool) //условие выхода за границы региона асм инструкций
									 continue;
							Dissasm_struct->EIP = (UIntPtr)fpInstruction_pool;
							Dissasm_struct->VirtualAddr = Hanheld_start_addr; //handler start addr
							asm_instruct_size = Disasm(Dissasm_struct); //disasm!!!

							// - - РАБОТА с пулом адресов - - //
							*fpAddPool__asm_addres = Hanheld_start_addr; //сохранение адреса текущей инструкцуии
							fpAddrPool_hanheld->HANHELD_asm_instruction_count++; // inc для счетчик инструкций

								// - - - - - modified VARIATOR START  - - - - - //
								switch(Dissasm_struct->Instruction.Opcode)
								{
										//%%%%%%% CONTROL_TRANSFER (RET & JMP & CALL) %%%%%%%%%%//
								case ASM_RET_0xBytes: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_condition_for_abort_variator_SUBcycle; continue; break;}
								case ASM_RET: {codedef_set_condition_for_abort_variator_SUBcycle; continue; break;} 
								case ASM_JMP_CALL_reg: {
									//rbp/rsi shift (INC/DEC)
									if (Dissasm_struct->Instruction.Category == (GENERAL_PURPOSE_INSTRUCTION | ARITHMETIC_INSTRUCTION)) //case ASM_DEC & ASM_INC !!!!!!!!!!!!!!!
									{
										if ((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE | GENERAL_REG | REG5)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgType == NO_ARGUMENT))// inc RBP
										{
											DH_VM_Output_32_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic, (signed long)Dissasm_struct->Instruction.Immediat, &RBP_shift); break;
										}

										if ((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE | GENERAL_REG | REG6)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgType == NO_ARGUMENT))// inc RSI
										{
											DH_VM_Output_32_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic, (signed long)Dissasm_struct->Instruction.Immediat, &PCODE_shift); break;
										}
										// continue ASM_JMP_CALL_reg
									}

									codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);

									if (Dissasm_struct->Instruction.BranchType == JmpType) //select JMP reg (END of HANHELD!!! TYPE = REACH_HANHELD_END) 
													{codedef_set_condition_for_abort_variator_SUBcycle; continue;} 
												if (Dissasm_struct->Instruction.BranchType == RetType) //ret (spec condition)
													{ codedef_set_condition_for_abort_variator_SUBcycle; continue;} //codedef_imm_return();//EXIT VM - END !!!!!!!!!!!!!!!!!!!

										if(Dissasm_struct->Instruction.Category == (GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION)) //case ASM_DEC & ASM_INC !!!!!!!!!!!!!!!
												{
													if((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE|GENERAL_REG|REG5)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgType == NO_ARGUMENT))// inc RBP
													{DH_VM_Output_32_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic,(signed long)Dissasm_struct->Instruction.Immediat, &RBP_shift); break;}

													if((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE|GENERAL_REG|REG6)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgType == NO_ARGUMENT))// inc RSI
													{DH_VM_Output_32_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic,(signed long)Dissasm_struct->Instruction.Immediat, &PCODE_shift); break;}					
													// continue ASM_JMP_CALL_reg
												}
									break;} //jmp reg & call reg
								case ASM_JMP_CONST_SHORT:
								case ASM_JMP_CONST: {
									if (Dissasm_struct->Instruction.AddrValue != NULL) //jmp CONST_address
											{codedef_calculate_hanheld_jmp_continue;asm_instruct_size = NULL; continue;}
							
									break;} 
								case ASM_CALL_OPERAND:{codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); if(Dissasm_struct->Instruction.AddrValue - Hanheld_start_addr < NEAR_JMPS_TRICK){codedef_calculate_hanheld_jmp_continue;asm_instruct_size = NULL; continue;}break;}
													//jmps inside hanheld
									// ************ JUMPOUTs ************ //												  
									case ASM_branch_JO: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);  codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne;  codedef_set_jumpout_table_element_ne; break;}
									case ASM_branch_JNO: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JB:  {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JAE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JNE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JBE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JA: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JS: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JNS:{codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JP: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JNP: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JL: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JGE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JLE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}
									case ASM_branch_JG: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne break;}

									case ASM_LEA: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); 	
										if((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE|GENERAL_REG|REG6)) && (Dissasm_struct->Argument2.ArgType == MEMORY_TYPE) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.Memory.Scale == NULL)) //arg.1
												{PCODE_shift += Dissasm_struct->Argument2.Memory.Displacement;} //lea rsi, [rsi+x]}
												  break;}
									case ASM_ADD_8bit: { //ASM_SUB == ASM_ADD !!!!!!!! low number
												codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION); //control filter!

												if((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE|GENERAL_REG|REG5)) && (Dissasm_struct->Argument2.ArgType == (CONSTANT_TYPE|ABSOLUTE_)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgSize == REGSIZE_8))// add/sub RBP
															{  DH_VM_Output_8_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic,(signed char)Dissasm_struct->Instruction.Immediat, &RBP_shift);
																break;} //codedef_imm_return

												if((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE|GENERAL_REG|REG6)) && (Dissasm_struct->Argument2.ArgType == (CONSTANT_TYPE|ABSOLUTE_)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgSize == REGSIZE_8))// add/sub RSI
															{DH_VM_Output_8_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic,(signed char)Dissasm_struct->Instruction.Immediat, &PCODE_shift); break;} //codedef_imm_return

									  break;}
									case ASM_ADD_32bit:{ //ASM_SUB == ASM_ADD !!!!!!!! long number
												codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|ARITHMETIC_INSTRUCTION); //control filter!

															if((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE|GENERAL_REG|REG5)) && (Dissasm_struct->Argument2.ArgType == (CONSTANT_TYPE|ABSOLUTE_)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgSize == REGSIZE_32))// add/sub RBP
																{  DH_VM_Output_32_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic,(signed long)Dissasm_struct->Instruction.Immediat, &RBP_shift);
																	break;} //codedef_imm_return

															if((Dissasm_struct->Argument1.ArgType == (REGISTER_TYPE|GENERAL_REG|REG6)) && (Dissasm_struct->Argument2.ArgType == (CONSTANT_TYPE|ABSOLUTE_)) && (Dissasm_struct->Argument1.ArgSize == REGSIZE_64) && (Dissasm_struct->Argument2.ArgSize == REGSIZE_32))// add/sub RSI
																{DH_VM_Output_32_bit_number_arithmetic_result_from_asm_instruction_mnemonic(Dissasm_struct->Instruction.Mnemonic,(signed long)Dissasm_struct->Instruction.Immediat, &PCODE_shift); break;} //codedef_imm_return
											  break;}
								}//END switcher
					//if(LOCK_VMPX_intrepret_taskwork)
						//	continue;

					// *************** HANHELD_TYPE_ENUMS, работа  с контекстами, интерпретатор, переключатель задач ********************** //

							// ____________ PARSE STEP-BYTE-STEP MODE _____________ //
							//SERVICE_TYPE* fpSelectedScanTaskESP = *fpTaskWorkSearcher_stack;
							//восстановление начальных указателей
								//> для контекста
								pVMPX_req_context = &pInterpret_VMPX_Stack->VMPX_HANHELD_TYPE_ENUMS[1]; //set null fp
								//pVMPX_req_context++; //skip HANHELD_TYPE_DETERMINE_ERROR
								//pVMPX_req_context++; //skip HANHELD_TYPE_VM_ENTER
								//> для "диспетчера задач по поиску асм инструкций"
								fpTaskWorkSearcher_stack = &TaskWorkSearcher_stack[1];	//skip HANHELD_TYPE_DETERMINE_ERROR
								//fpTaskWorkSearcher_stack++; //skip HANHELD_TYPE_DETERMINE_ERROR
								//fpTaskWorkSearcher_stack++; //skip HANHELD_TYPE_VM_ENTER
								fpLastCritical_Corrector_stack = &LastCritical_Corrector_stack[1]; //skip HANHELD_TYPE_DETERMINE_ERROR
					
					
										codedef_default_VMPX_one_step_typescan(HANHELD_TYPE_VM_ENTER) //1
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++; 
										codedef_default_VMPX_one_step_typescan(HANHELD_TYPE_SWITCH_ENTER) //2
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										//codedef_default_VMPX_one_step_typescan(HANHELD_TYPE_VM_EXIT) 
										codedef_default_VM_EXIT_signature //3
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_CALL) //4
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_RDTSC) //5
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;		
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_CPUID) //6
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
											//logical xor
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_CRC_CHECKL) //7
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_XOR_STACK_RSP_DWORD) //8
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_POPFQ) //9
										
											//read DS(Data Segment)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg8_memreg64_DS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg16_memreg64_DS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg32_memreg64_DS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg64_memreg64_DS)
											//write DS(Data Segment)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg8_DS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg16_DS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg32_DS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg64_DS)
											//p-code read
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_read_qword_PCODE)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_read_dword_PCODE)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_read_word_PCODE)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_read_byte_PCODE)
											//read SS(Stack Segment)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg8_memreg64_SS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg16_memreg64_SS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg32_memreg64_SS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg64_memreg64_SS)
											//write SS(Stack Segment)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg8_SS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg16_SS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg32_SS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg64_SS)
											//read GS
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg8_memreg64_GS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg16_memreg64_GS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg32_memreg64_GS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg64_memreg64_GS)
											//write GS
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg8_GS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg16_GS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg32_GS)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_memreg64_reg64_GS)
											//SAVE VARIABLE
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_struct_reg8)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_struct_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_struct_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_struct_reg64)
											//READ VARIABLE
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg8_struct)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg16_struct)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg32_struct)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOV_reg64_struct)
											//PUSH_VStack
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_PUSH_VStack_qword)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_PUSH_VStack_dword)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_PUSH_VStack_word)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_PUSH_VStack_byte)
											//POP_VStack
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_POP_VStack_qword)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_POP_VStack_dword)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_POP_VStack_word)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_POP_VStack_byte)
											//SHIFT_ROTATE (SHLD/SHRD)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHRD_64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHLD_64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHRD_32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHLD_32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHRD_16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHLD_16)
											//SHIFT_ROTATE (SHL/SHR)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_R_reg64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_R_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_R_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_R_reg8)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_L_reg64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_L_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_L_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_SHIFT_L_reg8)
											//div stack
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_DIV_qword_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_DIV_dword_stack)
											//div reg
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_DIV_reg64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_DIV_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_DIV_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_DIV_reg8)
											//integer div stack
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_Int_DIV_qword_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_Int_DIV_dword_stack)
											//integer div reg
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_Int_DIV_reg64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_Int_DIV_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_Int_DIV_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_Int_DIV_reg8)
											//MUL
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MUL_reg64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MUL_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MUL_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MUL_reg8)
											//INTEGER MUL
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_INTEGER_MUL_reg64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_INTEGER_MUL_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_INTEGER_MUL_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_INTEGER_MUL_reg8)
											//ADD stack
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_ADD_qword_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_ADD_dword_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_ADD_word_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_ADD_byte_stack)
											//AND
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_AND_qword_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_AND_dword_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_AND_word_stack)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_AND_byte_stack)
											//NOT-AND
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_not_and_reg64)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_not_and_reg32)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_not_and_reg16)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_not_and_reg8)
											//REPNE MOVS (масштабное копирование)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOVS_byte)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_MOVS_dword)
											//операции получения RANDOM констант
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_GET_RND_const_qword)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_GET_RND_const_dword)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_GET_RND_const_word)
										fpTaskWorkSearcher_stack++; pVMPX_req_context++; fpLastCritical_Corrector_stack++;
										codedef_default_VMPX_one_step_typescan__NO_EXTRACT(HANHELD_TYPE_GET_RND_const_byte)
				
										//if(fpContaint_handler->HANDELD_previously_type  == HANHELD_TYPE_MOV_reg64_memreg64_DS)
											//return;
				 }while(ii--);//итерации по глубине hanhelds (default: 200 инструкций в одном PRIMARY-проходе)

				 //операции по прошествии глубокого сканирования
					//> запись собранных данных в блок контейнера
					 fpContaint_handler->PCODE_Shift = PCODE_shift; //сдвиг ленты PCODE
					 fpContaint_handler->stack_RBP_Shift = RBP_shift; //сдвиг указателя V-stack
					 fpContaint_handler->AsmInstructionAddressPool_size = fpAddrPool_hanheld->HANHELD_asm_instruction_count; //количество инструкций
					 fpContaint_handler->fpCritical_jumpouts = fpJumpOutGraph; //следующий свободный блок графа JumpOUTS
					 fpContaint_handler->fpCritical_addres = fpDTAA_critical_addres; //следующий свободный блок массива Determine Type addres array
					//> окончательное решение о записи типа
					//перебор специальных значений
					// > HANHELD_TYPE_VM_EXIT
					 if ((pop_rax_r8 > 1) && (pop_rbx_r9 > 1) && (pop_rcx > 0) && (pop_rdx_r10 > 1) && (pop_rbp_r13 > 1) && (pop_rsi_r14 > 1) && (pop_rdi_r15 > 1))
						 {fpContaint_handler->HANDELD_type = HANHELD_TYPE_VM_EXIT; pVMPX_info_stack->identeficated_handles_count++;}
					 if(fpContaint_handler->HANDELD_previously_type != NULL)
						{fpContaint_handler->HANDELD_type = fpContaint_handler->HANDELD_previously_type; pVMPX_info_stack->identeficated_handles_count++;}
					
						//> перекидывание локальных данных в структуру пула
					 	fpAddrPool_hanheld->fpAddPool__FCM = fpAddPool__FCM; //fp по asm_instruction_unconditional_FLOW_CONTROL_MARKER
						fpAddrPool_hanheld->fpAddPool__FCM_dest_addres = fpAddPool__FCM_dest_addres; //fp по asm_instruction_unconditional_FLOW_CONTROL_MARKER_dest_addres
						fpAddrPool_hanheld->fpAddPool__asm_addres = fpAddPool__asm_addres; //fp по asm_instruction_addres

				DH_VMPX_VM_Scan_JUMPOUTs_Init(fpContaint_handler, Req_all_VM_insruction_region, fpAddrPool_hanheld, Dissasm_struct); //scan jumpouts

	}while(--i); //итерации по количеству hanhelds (256)

	//марикорование дубликатов
	DH_VM_Supply15_Mark_out_Duplicate_HANHELDs_256_table(pVMPX_info_stack);

	//вычисление процента распознанных хендлов (%)
	if(pVMPX_info_stack->handles_count != NULL)
	{
	size_t percent = (pVMPX_info_stack->identeficated_handles_count*100)/pVMPX_info_stack->handles_count;
	if (percent < HANHELD_IDENTIFY_CRITICAL_LOW_BORDER)
		return VMPX_ERROR_HANHELD_LOW_IDENTIFY_PERCENT;
	}
return NULL;
}


 SERVICE_COUNT __fastcall DH_VM_Supply15_Mark_out_Duplicate_HANHELDs_256_table(__in __out __in pVMPX_VM_PROFILE_INFO_STACK pVM_Stack_Info_set)
 {
	 //VM_Stack_Info_set->Containt_handler[0].
	 register size_t i = LIMIT_HANDLES_ON_SUPPLY-1;
	 register size_t ii;

	// if (VM_Stack_Info_set->Containt_handler[i].is_duplicate_hanheld_in_supply15 == true)
		//	return NULL;
	 register pHANHELD fpContaint_handler = (pHANHELD)((SERVICE_ADDRES)pVM_Stack_Info_set + sizeof(VMPX_VM_PROFILE_INFO_STACK));
	 fpContaint_handler+=(LIMIT_HANDLES_ON_SUPPLY-1); //end HANHELD
	 register pHANHELD fpContaint_handler_slave;
	 pHANHELD SaveENDHanheld_pos = fpContaint_handler;

	 register HANHELD_ADDRES Current_research_HANHELD_addr;
	 register SERVICE_COUNT num_of_dublicate = 0;
	 
	 fpContaint_handler++;
	 do
	 {
		 fpContaint_handler--; //dec
		 if (fpContaint_handler->is_duplicate_hanheld_in_supply15 == true) //is not dublicate
				continue;

				Current_research_HANHELD_addr  = fpContaint_handler->HANDELD_Primary_Addres; //Current_research_HANHELD_addr = VM_Stack_Info_set->Containt_handler[i].HANDELD_Primary_Addres;
				fpContaint_handler_slave = SaveENDHanheld_pos;
				ii = LIMIT_HANDLES_ON_SUPPLY-1;
				fpContaint_handler_slave++;
					do
					{
						fpContaint_handler_slave--;
							if(Current_research_HANHELD_addr != fpContaint_handler_slave->HANDELD_Primary_Addres) //first condition
								continue;

						if(fpContaint_handler_slave != fpContaint_handler)
							{fpContaint_handler_slave->is_duplicate_hanheld_in_supply15 = true; num_of_dublicate++;} //dublicate adress found
					}while(--ii); //secondary cycle
		 
	 }while(--i); //main cycle

	 pVM_Stack_Info_set->duplicate_handles_count = num_of_dublicate; //COPY retail count
return num_of_dublicate;
 }

 SERVICE_COUNT __fastcall DH_VMPX_VM_Scan_JUMPOUTs_Init(pHANHELD Research_hanheld, __in pREGION_COPY Req_all_VM_insruction_region, __in pVM_hanheld_addres_pool Req_VM_hanheld_instruction_addr_pool, __in PDISASM Dissasm_struct)
 {
	 if(Research_hanheld->critical_jumpouts_array_count == NULL)
		 return NULL;

	 register SERVICE_COUNT asm_pool_instruction_count = Req_VM_hanheld_instruction_addr_pool->HANHELD_asm_instruction_count;
	 if(asm_pool_instruction_count == NULL)
		 return false;
	 
	 register SERVICE_ADDRES jumpout_desd_addres; //адрес назначения прыжка
	 SERVICE_ADDRES* fpEnumAddpool_save = &Req_VM_hanheld_instruction_addr_pool->asm_instruction_addres[0];
	 SERVICE_ADDRES* fpEnumAddpool = --fpEnumAddpool_save; //dec для выравнивания

	//register SERVICE_COUNT i_jouts = NULL; //= MAX_DEEP_ASM_JUMPOUTS_HANHELD; - primary i
	register SERVICE_COUNT i_cycle = MAX_DEEP_ASM_JUMPOUTS_HANHELD; //slave i

	SERVICE_COUNT new_jouts = NULL;
 
	HANHELD_JUMPOUTS_GRAPH* fpResGRAPH = &Research_hanheld->critical_jumpouts_array[0];

		//указатели на следующие свободные ячейки
		Req_VM_hanheld_instruction_addr_pool->fpAddPool__asm_addres++; //fp-указатель юнита на массив адресов
		Req_VM_hanheld_instruction_addr_pool->fpAddPool__FCM++; //fp-указатель юнита на контрольный маркер
		Req_VM_hanheld_instruction_addr_pool->fpAddPool__FCM_dest_addres++; //fp-указатель адрес назначения контрольного маркера
	 do
	 {
		 jumpout_desd_addres = fpResGRAPH->GRAPH_START; //адрес назначения (адрес начала графа)
		 asm_pool_instruction_count = Req_VM_hanheld_instruction_addr_pool->HANHELD_asm_instruction_count; //количество пулов с адресами
		 fpEnumAddpool = fpEnumAddpool_save; //быстрое восстановление null fp
			 do 
			 {codedef_condition_set_GRAPH_circuit_closing_ne(jumpout_desd_addres);} while(asm_pool_instruction_count--); //для сворачивания графа do{}while циклов
		 
				if(fpResGRAPH->jumpout_function_as_VMProtect_definition != JUMPOUT_TYPE_CYCLE)
					new_jouts += DH_VMPX_VM_Scan_JUMPOUTs__fast(fpResGRAPH, Req_all_VM_insruction_region, Req_VM_hanheld_instruction_addr_pool, Research_hanheld, Dissasm_struct);
		
				fpResGRAPH++; if(fpResGRAPH->GRAPH_INIT_asm_instruction == NULL) break; //BREAK CYCLE condition
	 }while(--i_cycle); //slave cycle i decrement 
	 //num of found jumpouts
 return new_jouts;
 }// DH_VM_Scan_JUMPOUTs (main) end

 
 __forceinline SERVICE_COUNT DH_VMPX_VM_Scan_JUMPOUTs__fast(__in HANHELD_JUMPOUTS_GRAPH* fpCurrentResearchedJumpOutGraph, __in pREGION_COPY Req_all_VM_insruction_region, __in pVM_hanheld_addres_pool Req_VM_hanheld_instruction_addr_pool, __in pHANHELD fpContaint_handler, __in PDISASM Dissasm_struct)
 {

	 size_t ii = MAX_DEEP_ASM_IN_HANHELD;//глубина исследования
	 register SERVICE_COUNT New_JumpOuts = NULL;

	//данные пула адресов "островка" - restore mode для указателей
		register pVM_hanheld_addres_pool fpAddrPool_hanheld = Req_VM_hanheld_instruction_addr_pool; //fp-указатель на ТЕКУЩИЙ юнит пула под хендл "островка"
		register SERVICE_ADDRES* fpAddPool__asm_addres = Req_VM_hanheld_instruction_addr_pool->fpAddPool__asm_addres; //fp-указатель юнита на массив адресов
		LPBYTE fpAddPool__FCM = Req_VM_hanheld_instruction_addr_pool->fpAddPool__FCM; //fp-указатель юнита на контрольный маркер
		SERVICE_ADDRES* fpAddPool__FCM_dest_addres = Req_VM_hanheld_instruction_addr_pool->fpAddPool__FCM_dest_addres; //fp-указатель адрес назначения контрольного маркера
		SERVICE_ADDRES* fpEnumAddpool_save = &Req_VM_hanheld_instruction_addr_pool->asm_instruction_addres[0];
		fpEnumAddpool_save--; //ДЛЯ выравнивания


	//переменные дизассемблера
	 register size_t Safe_max_bound =  (ULONG64)Req_all_VM_insruction_region->allocated_pool + Req_all_VM_insruction_region->region_size;
	 LPBYTE instruction_pool = Req_all_VM_insruction_region->allocated_pool;
	 SERVICE_ADDRES Hanheld_start_addr =  NULL; //extract VA
	 PVOID fpInstruction_pool =  NULL; //extract pointer in the allocated pool
	 register size_t asm_instruct_size = NULL; //out asm size

		Hanheld_start_addr = fpCurrentResearchedJumpOutGraph->GRAPH_START; //следующий адрес хендла "островка" из таблицы
		fpInstruction_pool = (Hanheld_start_addr - Req_all_VM_insruction_region->region_start_addres) + instruction_pool; //синхронное вычисление указателя для него в регионе дампа асм инструкций

		//восстановление корректного указателя на следующее свободное место графа
		register HANHELD_JUMPOUTS_GRAPH* fpJumpOutGraph = fpContaint_handler->fpCritical_jumpouts;

	//восстановление найденного указателя на тип хендла как VMPX_профиль виртуальной машины
		pVM_VMPX_PROFILE_INI pVMPX_req_context = fpContaint_handler->pVMPX_profile_reference; //restore mode

		HANHELD_TYPE_CRITICAL_DETERMINE_ADDRES* fpDTAA_critical_addres = fpContaint_handler->fpCritical_addres;

	 do{

			 if((SERVICE_ADDRES)fpInstruction_pool >= Safe_max_bound || (SERVICE_ADDRES)fpInstruction_pool < (SERVICE_ADDRES)instruction_pool) //условие выхода за границы региона асм инструкций
							 break;

			 				//ДИЗАССЕМБЛЕР
					 		Hanheld_start_addr+=asm_instruct_size; fpInstruction_pool=(LPVOID)((ULONG64)fpInstruction_pool + (ULONG64)asm_instruct_size);
							Dissasm_struct->EIP = (UIntPtr)fpInstruction_pool;
							Dissasm_struct->VirtualAddr = Hanheld_start_addr; //handler start addr
							asm_instruct_size = Disasm(Dissasm_struct); //disasm!!!

							*fpAddPool__asm_addres = Hanheld_start_addr; //сохранение адреса текущей инструкцуии
							fpAddrPool_hanheld->HANHELD_asm_instruction_count++; // inc для счетчик инструкций

							//инкремент
								//> для пула адресов
								fpAddPool__asm_addres++;
								fpAddPool__FCM++;
								fpAddPool__FCM_dest_addres++;

	 								// - - - - - modified VARIATOR START  - - - - - //
								switch(Dissasm_struct->Instruction.Opcode)
								{
										//%%%%%%% CONTROL_TRANSFER (RET & JMP & CALL) %%%%%%%%%%//
								case ASM_RET_0xBytes: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_condition_for_abort_variator_SUBcycle; continue; break;}
								case ASM_RET: {codedef_set_condition_for_abort_variator_SUBcycle; continue; break;} 
								case ASM_JMP_CALL_reg: {
									codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);

									if (Dissasm_struct->Instruction.BranchType == JmpType) //select JMP reg (END of HANHELD!!! TYPE = REACH_HANHELD_END) 
													{codedef_set_FLOW_CONTROL_marker_ne(FLOW_CONTROL_MARKER_JUMP_REG); codedef_set_condition_for_abort_variator_SUBcycle; continue;} 
												if (Dissasm_struct->Instruction.BranchType == RetType) //ret (spec condition)
													{codedef_set_FLOW_CONTROL_marker_ne(FLOW_CONTROL_MARKER_RET);  codedef_set_condition_for_abort_variator_SUBcycle; continue;} //codedef_imm_return();//EXIT VM - END !!!!!!!!!!!!!!!!!!!
												break;} //jmp reg & call reg
								case ASM_JMP_CONST_SHORT:
								case ASM_JMP_CONST: {
									if (Dissasm_struct->Instruction.AddrValue != NULL) //jmp CONST_address
											{
											codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne
											codedef_set_FLOW_CONTROL_marker_ne(FLOW_CONTROL_MARKER_JUMP_CONST);

											register SERVICE_ADDRES JMPOperandAddr = Dissasm_struct->Instruction.AddrValue; //быстрое значение адреса
											register SERVICE_ADDRES* fpEnumAddpool = fpEnumAddpool_save; //быстрое восстановление null fp
											SERVICE_COUNT ii_jouts = fpAddrPool_hanheld->HANHELD_asm_instruction_count; //актуальное количество инструкций
											codedef_check_JMP_desdonation_address_include_on_addr_pool_ne(JUMPOUT_TYPE_BRANCH_DOUBLE);

											codedef_calculate_hanheld_jmp_continue;asm_instruct_size = NULL; continue;}						
									break;} 
								case ASM_CALL_OPERAND:{codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); if(Dissasm_struct->Instruction.AddrValue - Hanheld_start_addr < NEAR_JMPS_TRICK){codedef_calculate_hanheld_jmp_continue;asm_instruct_size = NULL; continue;}break;}
													//jmps inside hanheld
									// ************ JUMPOUTs ************ //												  
									case ASM_branch_JO: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER);  codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne;  codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JNO: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JB:  {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JAE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JNE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++;  break;}
									case ASM_branch_JBE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++;  break;}
									case ASM_branch_JA: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JS: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++;  break;}
									case ASM_branch_JNS:{codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JP: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JNP: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JL: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JGE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JLE: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
									case ASM_branch_JG: {codedef_category_filter(GENERAL_PURPOSE_INSTRUCTION|CONTROL_TRANSFER); codedef_set_FLOW_CONTROL_RETURN_WAYPOINT_ne; codedef_set_jumpout_table_element_ne New_JumpOuts++; break;}
								}//END switcher

								// ПОИСК КРИТИЧЕСКИХ ИНСТРУКЦИЙ В ВЕТКАХ
								if (asm_instruct_size == NULL) //фильтр №1 (для отсечки условных-безусловных переходов)
									continue;
								if (pVMPX_req_context == NULL) //фильтр №2 (если не определен тип "островка" - то только работа с Addres Pool)
									continue;

									switch(pVMPX_req_context->Quick_combine_type__Critical_control)\
															{\
															case VMPX_CONTEXT_COMBINE_STATIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr;\
																	if(DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_CRITICAL, fpInstruction_pool) == true)\
																		{codedef_fill_determine_critical_addres_array}\
																break;}\
															case VMPX_CONTEXT_COMBINE_STATIC__NO_CS: \
																{\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Critial_assembly.dest[0], asm_instruct_size))\
																		{codedef_fill_determine_critical_addres_array}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__NO_CS:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr;\
																	XEDParseAssemble(&pVMPX_req_context->xed_Critial_assembly);\
																	if(!memcmp(fpInstruction_pool, &pVMPX_req_context->xed_Critial_assembly.dest[0], asm_instruct_size))\
																			{codedef_fill_determine_critical_addres_array}\
																break;}\
															case VMPX_CONTEXT_COMBINE_DYNAMIC__CS_PRESENT:\
																{\
																	pVMPX_req_context->xed_Critial_assembly.cip = Hanheld_start_addr; \
																		 if (DH_Profile_PARSE_Arbitary_VMPX_CONTEXT_CONFIG__Release_normalize_instruction__NO_WRITE(pVMPX_req_context, VMPX_CONTEXT_ASM_CRITICAL, fpInstruction_pool) == true)\
																				{codedef_fill_determine_critical_addres_array}\
																break;}\
													break;}\
		 }while(ii--);

	 		//перекидывание локальных данных в структуру пула ОБРАТНО
			fpAddrPool_hanheld->fpAddPool__FCM = fpAddPool__FCM; //fp по asm_instruction_unconditional_FLOW_CONTROL_MARKER
			fpAddrPool_hanheld->fpAddPool__FCM_dest_addres = fpAddPool__FCM_dest_addres; //fp по asm_instruction_unconditional_FLOW_CONTROL_MARKER_dest_addres
			fpAddrPool_hanheld->fpAddPool__asm_addres = fpAddPool__asm_addres; //fp по asm_instruction_addres
			//перекидывание локальных данных в структуру "островка"
			fpContaint_handler->AsmInstructionAddressPool_size = fpAddrPool_hanheld->HANHELD_asm_instruction_count;
			fpContaint_handler->fpCritical_jumpouts = fpJumpOutGraph;
			fpContaint_handler->fpCritical_addres = fpDTAA_critical_addres;

return New_JumpOuts;
 }


bool __fastcall DH_VMPX_VM_Profiles__Assign_Name_with_mark_crossref_in_Supply15__by_ThreadWork(__in __out pVM_THREADWORK* ppThreadStack, __in SERVICE_COUNT Thread_stack_count, __out SERVICE_COUNT* pReport_WillBeCreated_VM_Profiles, __out SERVICE_COUNT* pReport_WillBeCreated_VM_Billet)
{
		if(Thread_stack_count == NULL) //filter #1
		return false;

		pVM_THREADWORK* fppThreadStack = ppThreadStack; //set null fp
		*pReport_WillBeCreated_VM_Profiles = 0;
		*pReport_WillBeCreated_VM_Billet = 0;

	fppThreadStack--;
	//сброс значений
	register size_t VMPX_vmp2_inc = 1;
	register size_t VMPX_vmp3new_inc = 1;
	size_t VMPX_D4_inc = 1;
	size_t VMPX_ANOTHER_inc = 1;
	do
	{
		fppThreadStack++;
		register pVM_THREADWORK fpThreadStack = *fppThreadStack;
		
		SERVICE_COUNT i = fpThreadStack->TA_Context_save_count; //сколько контекстов перебирается в одном тредворке
		SERVICE_COUNT ii = MAX_STACK_SEQ; //максимально допустимый вариант перебора
		register pVMPX_VM_PROFILE_INFO_STACK* fpContextSave_ESP = &fpThreadStack->pVM_Context_save[0]; //ссылка на первый контекст
		fpContextSave_ESP--;
		do
		{
			fpContextSave_ESP++;
			register pVMPX_VM_PROFILE_INFO_STACK pRestoredContextSave = *fpContextSave_ESP;
			if(pRestoredContextSave == NULL)
				continue;
			--i; //найден сохраненный вариант контекста
			//дублирующейся контексты - цепочки исключаются планировщиком (	if(fpSheduleSeqUnits->isDuplicateContext == true); fpThreadStack->ThreadID[0]))
			register WCHAR* pVM_Name_ref = &pRestoredContextSave->vm_name[0];

			//операции определения имени
			switch(pRestoredContextSave->VMPX_version)
			{
				case VM_TYPE_VMP2:
					{
						quick_wscpy_UNICODE_to_UNICODE_set_num_filename(&HUNT_PROFILE_HIVE.VMPX_Context_vmp2[0], pVM_Name_ref, HUNT_PROFILE_HIVE.VMPX_Context_vmp2_len, VMPX_vmp2_inc++);
					break;}
				case VM_TYPE_VMP3:
					{
						quick_wscpy_UNICODE_to_UNICODE_set_num_filename(&HUNT_PROFILE_HIVE.VMPX_Context_vmp3new[0], pVM_Name_ref, HUNT_PROFILE_HIVE.VMPX_Context_vmp3new_len, VMPX_vmp3new_inc++);
					break;}
				case VM_TYPE_VMX_D4:
					{
						quick_wscpy_UNICODE_to_UNICODE_set_num_filename(&HUNT_PROFILE_HIVE.VMPX_Context_D4[0], pVM_Name_ref, HUNT_PROFILE_HIVE.VMPX_Context_D4_len, VMPX_D4_inc++);
					break;}
				case VM_TYPE_ANOTHER:
					{
						quick_wscpy_UNICODE_to_UNICODE_set_num_filename(&HUNT_PROFILE_HIVE.VMPX_Context_ANOTHER[0], pVM_Name_ref, HUNT_PROFILE_HIVE.VMPX_Context_ANOTHER_len, VMPX_ANOTHER_inc++);
					break;}
			}//end context_switch

			if ((pRestoredContextSave->is_vm_billet == false ) && (pRestoredContextSave->identeficated_handles_count != NULL))
				*pReport_WillBeCreated_VM_Profiles+=1;
			else
				*pReport_WillBeCreated_VM_Billet+=1;

			 if(i == NULL)
				 break; //TERMINATE cycle
		}while(--ii);//sub cycle - Seq parse
	}while(--Thread_stack_count);//main cycle
}

// ******************************* SEARCH  OBJECT ******************************** //
pVM_THREADWORK__OBJECT_SEARCH __fastcall DH_VM_Search_Object_in_containters_MT(__in pDH_ENUM_FILES_of_PROFILES pEnumFiles, __in SERVICE_COUNT enum_files_count, __in const TCHAR* pObject_text_ref)
{
	if (!pEnumFiles && !pObject_text_ref && !enum_files_count) //фильтр №1
		return false;

	//ОБЩИЕ данные MT
	register LPDWORD fpTID; //Указатель на синхронный ThreadID стек
	register HANDLE* fphThread; //Указатель на синхронный Thread HANDLE стек
	size_t iterations_count = NULL; //количество итераций (количество сохраненных контейнеров)
	register LPDWORD fpTID_charged; //стек - сохраненные ID сохданных потоков. Источник!
	register LPDWORD fpTID_shedule; //стек планировщика ID потоков. Приёмник!
	bool* pReadyFlag; //флаг готовности планировщика
	SERVICE_COUNT* pHow_thread_has_been_created; //изначальное количество потоков
	volatile SERVICE_COUNT* pVolatile_TA_Active_THREADs;  //количество активных потоков, задействованных сейчас для исследования (требуется для планировщика задач). Переменная volatile
	LPVOID* pContextSave = NULL;

	
	register pVM_THREADWORK__OBJECT_SEARCH pThreadWorkStack = (pVM_THREADWORK__OBJECT_SEARCH)::VirtualAlloc(NULL, sizeof(VM_THREADWORK__OBJECT_SEARCH), MEM_COMMIT, PAGE_READWRITE);

	if (pThreadWorkStack == NULL)
		return false;

		iterations_count = enum_files_count; //количество сохраненных контекстов
		fpTID = &pThreadWorkStack->ThreadID[0]; //set null-fp
		fphThread = &pThreadWorkStack->hThread[0]; //set null-fp
		fpTID_charged = &pThreadWorkStack->ThreadID[0];
		fpTID_shedule = &pThreadWorkStack->Shedule_ThreadID[0];
		pReadyFlag = &pThreadWorkStack->Ready_flag;
		pHow_thread_has_been_created = &pThreadWorkStack->How_thread_has_been_created;
		pVolatile_TA_Active_THREADs = &pThreadWorkStack->TA_Active_Threads_count;
		pThreadWorkStack->pEnumFilesStack_start = pEnumFiles;
		pThreadWorkStack->EnumFilesStack_COUNT = enum_files_count;


		if (iterations_count == NULL) //фильтр №1
			{::VirtualFree(pThreadWorkStack, 0, MEM_RELEASE);return false;}

	//**************** ОПРЕДЕЛЯЕМ ТИП **************** //
	unsigned long wstrlen = wcslen(pObject_text_ref);
	if (wstrlen == 0)
		{::VirtualFree(pThreadWorkStack, 0, MEM_RELEASE); return false;}

	SERVICE_TYPE prep_hanheld_type = DH_VM_HANHELD_string_To_type((TCHAR*)pObject_text_ref);

	if(prep_hanheld_type == NULL)
	{
		//определяем, как адрес
		pThreadWorkStack->pObject_text_addres_wcstoul = _wcstoui64(pObject_text_ref, NULL, 16);
		if (pThreadWorkStack->pObject_text_addres_wcstoul == NULL || pThreadWorkStack->pObject_text_addres_wcstoul <= 0xFF)
			{::VirtualFree(pThreadWorkStack, 0, MEM_RELEASE); return false;}
		pThreadWorkStack->pObject_text_ref_TYPE = VM_OBJECT_TYPE_REF__Addres_type;
	}
	else
	{
		//определяем, как тип хендла
		pThreadWorkStack->pObject_text_ref_TYPE = VM_OBJECT_TYPE_REF__Hanheld_type;
		pThreadWorkStack->pObject_text_addres_wcstoul = prep_hanheld_type;
	}

	// --------- get proc physical cores -----------------------
	size_t num_of_cores = 2;
	__asm
	{
		mov eax, 1
		cpuid
		mov eax, 11111111b
		shr ebx, 16
		and ebx, eax
		lea rax, [num_of_cores]
		mov[rax], ebx
	}

	if (iterations_count < num_of_cores) //если ядер больше, чем цепочек
		num_of_cores = iterations_count;

	// -------- create threads == number of phy cores ----------------
	memset(fpTID_shedule, 0, num_of_cores * sizeof(DWORD)); //нулевые значения стека имеющихся потоков
	size_t succes_created_threads = NULL;
	size_t i = num_of_cores;
	*pReadyFlag = false;

	//	num_of_cores = 1;//test!
	switch (num_of_cores)
	{
	case 16:
	{codedef_create_thread_shedule_search}
	case 15:
	{codedef_create_thread_shedule_search}
	case 14:
	{codedef_create_thread_shedule_search}
	case 13:
	{codedef_create_thread_shedule_search}
	case 12:
	{codedef_create_thread_shedule_search}
	case 11:
	{codedef_create_thread_shedule_search}
	case 10:
	{codedef_create_thread_shedule_search}
	case 9:
	{codedef_create_thread_shedule_search}
	case 8:
	{codedef_create_thread_shedule_search}
	case 7:
	{codedef_create_thread_shedule_search}
	case 6:
	{codedef_create_thread_shedule_search}
	case 5:
	{codedef_create_thread_shedule_search}
	case 4:
	{codedef_create_thread_shedule_search}
	case 3:
	{codedef_create_thread_shedule_search}
	case 2:
	{codedef_create_thread_shedule_search}
	case 1:
	case 0:
	{codedef_create_thread_shedule_search break; }
	default:
	{
		do
		{
			*fphThread = ::CreateRemoteThreadEx(DH_Current_process_fast_handle, NULL, NULL, (LPTHREAD_START_ROUTINE)DH_VM_Shedule_Search_Object_MT, pThreadWorkStack, NULL, NULL, fpTID);
			if (*fphThread != NULL) //condition for inc
			{
				fphThread++; fpTID++; succes_created_threads++;
			}
		} while (--i);
	} //def cycle
	}//end coreswitcher

	//shedule ops
	register unsigned long thread_i = succes_created_threads;
	i = iterations_count;//в pDH_ENUM_FILES_of_PROFILES стек идет последовательно без прерываний

	LPDWORD fpTID_charged_restore = fpTID_charged; //null fp FOR restore
	fpTID_shedule--;
	do
	{
		fpTID_shedule++; //synchro inc  shedule_stack
		*fpTID_shedule = *fpTID_charged++; //shedule current context - current charged thread
		if (--thread_i != NULL) //check for thread-empty list
			continue;

		thread_i = succes_created_threads; //restore success threads count
		fpTID_charged = fpTID_charged_restore; //restore null-fp
	} while (--i);

	*pHow_thread_has_been_created = succes_created_threads; //начальное значение потоков
	*pVolatile_TA_Active_THREADs = succes_created_threads; //количество зайдествованных потоков
	*pReadyFlag = true; //get ready
	
	//встроенный STAND-BY WAITING MODE!
	do
	{
		::SleepEx(1, false);
	} while (pThreadWorkStack->TA_Active_Threads_count != 0);

return pThreadWorkStack;
}

DWORD WINAPI DH_VM_Shedule_Search_Object_MT(LPVOID Param) //Search for req objects
{
	register size_t TID = ::GetCurrentThreadId(); //get current TID
	pVM_THREADWORK__OBJECT_SEARCH pThreadWorkStack = reinterpret_cast<pVM_THREADWORK__OBJECT_SEARCH>(Param);


	register LPDWORD fpTID_shedule_stack = &pThreadWorkStack->Shedule_ThreadID[0]; //set null
	pDH_ENUM_FILES_of_PROFILES fpResult_VM_Context = pThreadWorkStack->pEnumFilesStack_start;

	pDH_VM_FOUND_RESULT pFoundResultStruct = &pThreadWorkStack->VM_Found_result[0];
	
	DISASM Dissasm_struct;

	//set local copy of HUNT_HIVE.PROFILE_PATH
	TCHAR MT_PROFILE_PATH[MAX_PATH * 2];
	register TCHAR* pMT_PROFILE_PATH_0ptr = &MT_PROFILE_PATH[0];
	wcscpy(&MT_PROFILE_PATH[0], &HUNT_HIVE.PROFILE_PATH[0]);

	fpTID_shedule_stack--;
	fpResult_VM_Context--;
	pFoundResultStruct--;
	//waiting mode
	do { ::SleepEx(0, false); } while (pThreadWorkStack->Ready_flag == false);

	register SERVICE_ADDRES Search_object_wcstoul = pThreadWorkStack->pObject_text_addres_wcstoul;
	//set scheduler step-size
	switch(pThreadWorkStack->pObject_text_ref_TYPE)
	{
	case VM_OBJECT_TYPE_REF__Addres_type:
	{
			SERVICE_COUNT iterations_count = pThreadWorkStack->EnumFilesStack_COUNT;
			pThreadWorkStack->TA_Total_VM_Profiles_found_count = 0;
			pThreadWorkStack->TA_Total_HANHELDS__in_VM_Profiles_found_count = 0;
			do
			{
				fpTID_shedule_stack++;
				fpResult_VM_Context++;
				pFoundResultStruct++;

				if (fpResult_VM_Context == 0) //фильтр №1
					continue;

				if (*fpTID_shedule_stack != TID) //поиск своихъ
					continue;

				register pVMPX_VM_PROFILE_INFO_STACK pVM_Profile = (pVMPX_VM_PROFILE_INFO_STACK)DH_Read_Current_hunt_profile_CONTAINER__readall_MT(PROFILE_TYPE_VM, &fpResult_VM_Context->FileName[0], pMT_PROFILE_PATH_0ptr);
				if (pVM_Profile == NULL)
					continue;
				if (pVM_Profile->handles_count == 0) //фильтр по нулевому количество хендлов.
					{free(pVM_Profile);continue;}

		
				SERVICE_COUNT hanheld_iterations = pVM_Profile->handles_count; //количество итераций по хендлам
				pVM_hanheld_addres_pool pVM_hanheld_Addres_pool = (pVM_hanheld_addres_pool)((SERVICE_ADDRES)pVM_Profile + pVM_Profile->ofs_VM_hanheld_addres_pool); //восстанавливаем адрес на первый Addres_pool
				pHANHELD pVM_hanheld = (pHANHELD)((SERVICE_ADDRES)pVM_Profile + pVM_Profile->ofs_1Containt_handler); //восстанавливаем адрес на первый hanheld
		
				pHANHELD* fpFoundHanheld = &pFoundResultStruct->pFoundHanheld[0]; //fp-NULL FOUND hanheld
				SERVICE_TYPE* fpFound_target_type = &pFoundResultStruct->Found_target_type[0]; //fp-NULL FOUND type

				//+++++++++ ПРОВЕРКА ПО SUPPLY15 +++++++++//
				if ((SERVICE_ADDRES)pVM_Profile->supply_15_start_address == Search_object_wcstoul)
					{codedef_Success_found_target_object_sup15(VM_FOUND_SUPPLY15, FOUND_ASSUME_IN_ALL_HANHELDS)	continue;}


				pVM_hanheld_Addres_pool--;
				pVM_hanheld--;
					do
					{ 
						pVM_hanheld_Addres_pool++;
						pVM_hanheld++;


						//+++++++++ ПРОВЕРКА ПО CELL_ADDRES +++++++++//
						if (((SERVICE_ADDRES)pVM_hanheld->Cell_Addres != 0) && ((SERVICE_ADDRES)pVM_hanheld->Cell_Addres == Search_object_wcstoul))
						{
							codedef_Success_found_target_object_inc(VM_FOUND_SUPPLY15_CELL)	continue;
						}

						//-------- ПЕРЕБОР в Addres Pool ---------//
						size_t hanheld_asm_instruction_count = pVM_hanheld_Addres_pool->HANHELD_asm_instruction_count;
							if (hanheld_asm_instruction_count == 0)
								continue;
							if (pVM_hanheld->is_duplicate_hanheld_in_supply15 == true)
								continue;

							SERVICE_ADDRES* fpAddPool__asm_addres = &pVM_hanheld_Addres_pool->asm_instruction_addres[0];
							fpAddPool__asm_addres--;
							do
							{
								fpAddPool__asm_addres++;
									//ИЩЁМ НАПРЯМУЮ
									if (Search_object_wcstoul != *fpAddPool__asm_addres) //если не найдено прямое значение
									{ 
										//ищем среди середины инструкций//
										if (*(fpAddPool__asm_addres + 1) == NULL) //если следующая инструкция - пустая
											break;
										SERVICE_ADDRES CurrentAddres = *fpAddPool__asm_addres;
										SERVICE_ADDRES UpAddres = *(fpAddPool__asm_addres + 1);
										if((CurrentAddres < UpAddres) && ((UpAddres - CurrentAddres) < APPROX_SAFE_ASM_INSTR_COUNT))
											if (Search_object_wcstoul > CurrentAddres && Search_object_wcstoul < UpAddres)
											{
												//SUCCESS!!! - MID asm pool ( CurrentAddres -> Search_object_wcstoul <- UpAddres)
												codedef_Success_found_target_object_inc(VM_FOUND_ADDRES_POOL_MID_ASSEMBLY)
												break;
											}
									continue;
									}
									//SUCCESS!!! - PRIMARY asm pool ((Search_object_wcstoul == *fpAddPool__asm_addres)
 									codedef_Success_found_target_object_inc(VM_FOUND_ADDRES_POOL_PRIMARY_ASSEMBLY)
									break;
							} while (--hanheld_asm_instruction_count);
					} while (--hanheld_iterations);
						//ПОДСЧЕТ РЕЗУЛЬТАТОВ
						if (pFoundResultStruct->Found_hanheld_stack_count == NULL)
							free(pVM_Profile);
						else
							::InterlockedIncrement(&pThreadWorkStack->TA_Total_VM_Profiles_found_count);
			} while (--iterations_count);
			break; }//end case VM_OBJECT_TYPE_REF__Addres_type
	case VM_OBJECT_TYPE_REF__Hanheld_type:
	{
		SERVICE_COUNT iterations_count = pThreadWorkStack->EnumFilesStack_COUNT;
		pThreadWorkStack->TA_Total_VM_Profiles_found_count = 0;
		pThreadWorkStack->TA_Total_HANHELDS__in_VM_Profiles_found_count = 0;
		do
		{
			fpTID_shedule_stack++;
			fpResult_VM_Context++;
			pFoundResultStruct++;

			if (fpResult_VM_Context == 0) //фильтр №1
				continue;

			if (*fpTID_shedule_stack != TID) //поиск своихъ
				continue;

			register pVMPX_VM_PROFILE_INFO_STACK pVM_Profile = (pVMPX_VM_PROFILE_INFO_STACK)DH_Read_Current_hunt_profile_CONTAINER__readall_MT(PROFILE_TYPE_VM, &fpResult_VM_Context->FileName[0], pMT_PROFILE_PATH_0ptr);
			if (pVM_Profile == NULL)
				continue;
			if (pVM_Profile->handles_count == 0) //фильтр по нулевому количество хендлов.
			{
				free(pVM_Profile); continue;
			}

			SERVICE_COUNT hanheld_iterations = pVM_Profile->handles_count; //количество итераций по хендлам
			register pHANHELD pVM_hanheld = (pHANHELD)((SERVICE_ADDRES)pVM_Profile + pVM_Profile->ofs_1Containt_handler); //восстанавливаем адрес на первый hanheld

			pHANHELD* fpFoundHanheld = &pFoundResultStruct->pFoundHanheld[0]; //fp-NULL FOUND hanheld
			SERVICE_TYPE* fpFound_target_type = &pFoundResultStruct->Found_target_type[0]; //fp-NULL FOUND type

			pVM_hanheld--;
			do
			{
				pVM_hanheld++;
				if (pVM_hanheld->is_duplicate_hanheld_in_supply15 == true) //filter #1 - exclude duplicate
					continue;

				if (pVM_hanheld->HANDELD_type != Search_object_wcstoul) //main if
					continue;

				codedef_Success_found_target_object_inc(VM_FOUND_TYPEDEF_HANHELD)
			} while (--hanheld_iterations);
			//ПОДСЧЕТ РЕЗУЛЬТАТОВ
			if (pFoundResultStruct->Found_hanheld_stack_count == NULL)
				free(pVM_Profile);
			else
				::InterlockedIncrement(&pThreadWorkStack->TA_Total_VM_Profiles_found_count);
		}while (--iterations_count);//end do-while iterations_count
		break; }
	}//end TYPE switcher

	::InterlockedDecrement(&pThreadWorkStack->TA_Active_Threads_count);
	return NULL;
}

bool __fastcall DH_VM_ThreadWork_Object_found_ClearSet(__in pVM_THREADWORK__OBJECT_SEARCH pThreadWorkStack)
{
	if (pThreadWorkStack->TA_Total_VM_Profiles_found_count == 0)
		return true;

	SERVICE_COUNT i = MAX_CONTAINTER_FILES;
	register SERVICE_COUNT i_SUCCESS = pThreadWorkStack->TA_Total_VM_Profiles_found_count;
	pDH_VM_FOUND_RESULT fpoundResult = &pThreadWorkStack->VM_Found_result[0];
	fpoundResult--;
	do
	{
		fpoundResult++;
		if (fpoundResult->pVM_Success_found_VM_profile == NULL)
			continue;

		free(fpoundResult->pVM_Success_found_VM_profile);
		if (--i_SUCCESS == 0)
			break;
	}while (--i);
	::VirtualFree(pThreadWorkStack, 0, MEM_RELEASE);
	pThreadWorkStack = NULL;
	return true;
}